[
{
	"uri": "/5-vpnsitetosite/5.1-createvpnenv/",
	"title": "Create a VPN environment",
	"tags": [],
	"description": "",
	"content": "Create a VPN environment Before initiating and configuring the Site-to-Site VPN connection, we need to create a branch emulator (ASG VPN) environment like the architecture below.\nContent  Create ASG VPN VPC, 2 subnets, Internet Gateway Initiate EC2 on ASG VPN VPC  "
},
{
	"uri": "/4-createec2server/4.1-createec2/",
	"title": "Create EC2 Server",
	"tags": [],
	"description": "",
	"content": "Create EC2 in the Public subnet   Access AWS Management Console\n Find EC2 Select EC2     In the EC2 interface\n Select Instances Select Launch instances    Name and tags of the instance, enter EC2 Public   Executing AMI Selection\n Select Quick Start Select Amazon Linux 2 Select AMI    Select Instance type and Select Create new key pair   In the Create key pair interface\n Key pair name, enter aws-keypair (optional name, you can set any). Key pair type, select RSA Private key file format, select .pem     Configure Network\n VPC, select ASG Subnet, select Public Subnet 1 Auto-assign public IP, select Enable Firewall (Security Group), select Select existing security group Select Public subnet -SG Select Launch instance    Complete instance creation  Wait about 5 minutes Status check will change to 2/2 checks passed  Create EC2 in a Private subnet  In the EC2 interface\n Select Instances Select Launch instances    Name and tags, enter EC2 Private\n   Executing AMI Selection\n Select Quick Start Select Amazon Linux 2 Select AMI    Make instance type selection. Key pair name, select aws-keypair   Configure Network\n VPC, select ASG vpc Subnet, select Private subnet 2 Auto-assign public IP, select Disable. If not Disable, you need to check the configuration automatically allocate public IP for the subnet.     Complete instance creation\n Select View all instances     Select EC2 Private\n Select Details Store Private IPv4 addresses    "
},
{
	"uri": "/5-vpnsitetosite/5.2-vpnsitetosite/5.2.1-createvpgw/",
	"title": "Create Virtual Private Gateway",
	"tags": [],
	"description": "",
	"content": "Create Virtual Private Gateway   Access to VPC\n Select Virtual Private Gateway Select Create Virtual Private Gateway     In the Create Virtual Private Gateway interface\n Name tag, enter VPN Gateway Select Amazon default ASN Select Create virtual private gateway     We need to implement Attach to VPC\n Select Actions Select Attach to VPC     In the Attach to VPC interface\n Select VPC ASG. Select Attach to VPC    Finish and see State as Attached  "
},
{
	"uri": "/3-prerequiste/3.1-createvpc/",
	"title": "Create VPC",
	"tags": [],
	"description": "",
	"content": "Create VPC   Access the AWS Management Console interface\n Find VPC Select VPC     In the VPC interface\n Select Yours VPC Select Create VPC     Follow the steps to create a VPC\n Resource, select VPC only Name tag, enter ASG IPv4 CIDR, enter 10.10.0.0/16    For the Tenancy configuration, we will leave the default mechanism. If we switch to Dedicated, there will be some EC2 Instance type that is not suitable and will not be created in VPC with tenancy mode as Dedicate\n\rSelect Create VPC  Finish creating VPC   View the details of the newly created VPC. Check if not Enable DNS resolution and DNS Hostname\n Go to Edit VPC settings Select DNS settings Select and Save.    "
},
{
	"uri": "/5-vpnsitetosite/5.1-createvpnenv/5.1.1-createvpnvpc/",
	"title": "Create VPC for VPN",
	"tags": [],
	"description": "",
	"content": "Create a VPN environment   Access VPC interface\n Select Yours VPC Select Create VPC     In the Create VPC interface\n Resource, select VPC only Name, enter ASG VPN IPv4 CIDR block, enter 10.11.0.0/16    Select Create VPC  Create a successful VPC   Access VPC interface\n Select Subnets Select Create subnet     In the Create subnet interface\n Select ASG VPN vpc     In the Subnet settings interface\n Subnet name, enter VPN Public Select Availability Zone: ap-southeast-1a Select IPv4 CIDR block as 10.11.1.0/24 according to the architecture described    Successfully Created VPN Public   In the VPC interface\n Select Subnets Select VPN Public Select Actions Select Edit subnet settings     Execute Auto-assign IP settings\n Select Enable auto-assign public IPv4 address Select Save    Successful IP allocation   In the VPC interface\n Select Internet Gateway Select Create internet gateway     In the Create internet gateway interface\n Name tag, enter Internet Gateway VPN Select Create internet gateway     After creating Internet Gateway VPN successfully and State is Detached. Next, we need to Attach the Internet Gateway to VPC ASG VPN.\n Select Actions Select Attach to VPC     Select VPC ASG VPN, VPC ID will be automatically filled in.\n Select Attach Internet Gateway    Attach succeeds when State is Attached   Next we need to create a Route Table that routes out to the internet through the Internet Gateway. In the VPC interface\n Select Route Tables Select Create route table     In the Create route table interface\n Name, enter Route table VPN - Public Select VPC named ASG VPN , VPC id will be automatically filled in. Select Create route table     Successfully created route table. In the Route table VPN - Public interface\n Select Route Select Edit route     In the Edit routes interface\n Select Add route Fill in the Destination CIDR : 0.0.0.0/0 representing the Internet. In the Target section select Internet Gateway, then select the Internet Gateway VPN we created. Internet Gateway ID will be automatically filled in. Select Save changes     Complete and test the route\n  In the Route table VPN - Public interface\n Select Subnet associations Select Edit subnet associations     In the Edit subnet associations interface\n Expand the Subnet ID column by dragging the pane to the right. Select subnet VPN Public. Select Save associations    Complete and recheck Routes  "
},
{
	"uri": "/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction of Amazon VPC Amazon Virtual Private Cloud (Amazon VPC) is a “Virtual Private Cloud” which is a custom virtual network located inside the AWS Cloud and isolated from the entire outside world. The concept is similar to designing and implementing a separate standalone network environment in an on-premise data center, which is still very popular today in many countries of the world.\nInside that custom VPC, you have full control over your virtual network environment, meaning both the ability to initialize and run AWS resources and the ability to select IP address ranges, create networks subnets and configure routing tables and network gateways. You can use both IPv4 and IPv6 for secure and easy access to resources and applications in the VPC.\nRegion is a concept that describes many extremely large clusters of AWS data centers located in a certain territory. Within a region, you can create multiple VPCs, and each VPC is distinguished by different ranges of IP address spaces. You specify the IPv4 address range by selecting a Classless Inter-Domain Routing (CIDR), such as 10.0.0.0/16. The Amazon VPC address range cannot be changed once it has been created. Amazon VPC address ranges can be as large as /16 (ie 65536 available addresses) or as small as /28 (ie 16 available addresses) and they must not overlap with any other networks to which they will be connected. connect to.\nThe Amazon VPC service was launched after the Amazon EC2 service, so at some point, AWS offered two different networking platforms, EC2-Classic and EC2-VPC. EC2-Classic is the first networking platform where all Amazon EC2 is created in a single flat network, sharing connectivity among AWS customers. As of December 2013, AWS only supports EC2-VPC with default VPC created in each Region and a default subnet with a CIDR block of 172.31.0.0/16.\nContent  Subnets Route Table Internet Gateway NAT Gateway  Now we will go through the most basic concepts of VPC in the next sections.\n"
},
{
	"uri": "/2-firewallinvpc/2.1-securitygroup/",
	"title": "Security Group",
	"tags": [],
	"description": "",
	"content": "Security Group Some basic features of Security group:\n Only Allow rules can be added, Deny rules cannot be added. Separate rules for outgoing or incoming traffic can be specified. A newly created Security group has no Inbound rules available. Therefore, at the beginning Instance will not allow any traffic to enter, requiring us to add an Inbound rule to allow access. By default, the Security group has an Outbound rule that allows all traffic to go out of the Instance. This rule can be edited (deleted) and added with specific Outbound rules, specifying which traffic originating from the Instance is allowed to go out. If the SG does not have an Outbound rule, then no traffic is allowed to leave the Instance. Security groups is a Stateful service - meaning that if traffic going into the Instance is allowed, then the traffic can also go out of the Instance, and vice versa, regardless of the Outbound rule. Instances can only communicate with each other if and only if they are associated with a Security group that allows connections, or a Security group to which the Instance is associated contains a Rule that allows traffic (except for the default Security group. with default rules that allow all traffic to be accessed). Security groups are associated with network interfaces. After the Instance has been initialized, you can still change the Security group assigned to the Instance, which also changes the security group assigned to the corresponding primary network interface.  Security group Rule Rule is generated to grant access to traffic entering or leaving the Instance. This access can be applied to a specific CIDR or to a Security group located in the same VPC or located in another VPC but with a peering connection already initiated.\nBasic components of Security group rule:\n (Inbound rules only) includes the origin (source) of the traffic and the destination port or port range. The source can be another security group, an IPv4 or IPv6 CIDR range, or simply an IPv4 or IPv6 address. (Outbound rules only) includes the destination of the traffic and the destination port or destination port range. The destination can be another security group, an IPv4 or IPv6 CIDR range, or simply an IPv4 or IPv6 address, or a service that begins with a prefix (e.g. igw_xxx) in the prefix ID list (a service is identified by the prefix ID - the name and ID of the service available in the region). Every protocol has some standard protocol. Example: SSH is 22,..  "
},
{
	"uri": "/1-introduce/1.1-subnets/",
	"title": "Subnets",
	"tags": [],
	"description": "",
	"content": "Subnets A subnet is a segment of the IP address range that you use when you provision your Amazon VPC, which directly provides the active network range to the AWS resources that may run within it, such as Amazon EC2, Amazon RDS (Amazon Relationship Database). ),\u0026hellip; Subnets are also identified through CIDR blocks (eg 10.0.1.0/24 and 192.168.0.0/24) and the subnet\u0026rsquo;s CIDRs must be in the VPC\u0026rsquo;s CIDR. The smallest subnet that can be created is /28 (16 IP addresses). AWS stores the first 4 IP addresses and the last 1 IP address of each subnet for intranet networking purposes. For example, subnet /28 has 16 available IP addresses, but removes 5 reserved IPs for AWS, leaving 11 usable IP addresses for resources operating within this subnet.\nAvailability Zone or abbreviated to AZ is a one or multi data center, located within Region and identified based on geographical location. Within an AZ there can be one or more subnets, but a subnet can only reside in a single AZ and cannot extend to other AZs.\nSubnets are divided into categories such as Public, Private, or VPN-only. Public subnet is a subnet with a route table (discussed later) that directs traffic within the subnet to the VPC IGW (discussed later) The Private subnet is the opposite of the Public subnet, which does not have a route table that directs traffic to the VPC IGW. VPN-only subnet is a subnet that has a route table that directs traffic to Amazon VPC\u0026rsquo;s VPG (discussed later).\nRegardless of the type of subnet, the subnet\u0026rsquo;s internal IP address range is always private (that is, from outside the Internet it is not possible to directly connect to addresses in this range).\n"
},
{
	"uri": "/",
	"title": "Work with Amazon VPC",
	"tags": [],
	"description": "",
	"content": "Work with Amazon VPC Overview In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon VPC (Virtual Private Networking). Learn key concepts and features in Amazon VPC. Practice creating a basic VPC and configuring a Site to Site VPN to connect an on-premise environment to an AWS VPC environment.\nContent  Introducing VPC Firewall in VPC Preparation steps Create EC2 Server Site-to-Site VPN Configuration Resource Cleanup  "
},
{
	"uri": "/5-vpnsitetosite/5.2-vpnsitetosite/",
	"title": "Configuring VPN Connection",
	"tags": [],
	"description": "",
	"content": "Configure VPN connection In this step we will proceed to create Virtual Private Gateway, Customer Gateway and VPN Site to Site connection.\nContent:  Create Virtual Private Gateway Create Customer Gateway Create VPN Connection Customer GW Configuration Configuring VPN tunnel  "
},
{
	"uri": "/5-vpnsitetosite/5.2-vpnsitetosite/5.2.2-createcustomergw/",
	"title": "Create Customer Gateway",
	"tags": [],
	"description": "",
	"content": "Create Customer Gateway   Access to VPC\n Select Customer Gateways Select Create Customer Gateway     In the Create Customer Gateway interface\n Name tag, enter Customer Gateway IP address, enter public IP address of the server EC2 Customer Gateway. Select Create Customer Gateway    Wait about 5 minutes, finish creating Customer Gateway  Note: according to the architectural model, the Customer Gateway will reside in the VPC on the onpremise environment. What we are doing now is declaring to AWS that we will have a Customer Gateway with a public IP address that is the public address of the EC2 instance : Customer Gateway is in the ASG VPN VPC\n\r"
},
{
	"uri": "/3-prerequiste/3.2-createsubnet/",
	"title": "Create Subnet",
	"tags": [],
	"description": "",
	"content": "Create subnet   In the VPC interface\n Select Subnets Select Create subnet     In the Create subnet interface\n Select ASG VPC     Implement subnet settings\n Subnet name, enter Public Subnet 1 Select AZ ap-southeast-1a IPv4 CIDR block, import 10.10.1.0/24 according to architecture description Select Create subnet    Finish creating subnet   Follow the same steps to create more subnets\n Public subnet 2 with CIDR of 10.10.2.0/24 located in Availability Zone ap-southeast-1b.     Private subnet 1 with CIDR of 10.10.3.0/24 located in Availability Zone ap-southeast-1a.   Private subnet 2 with CIDR of 10.10.4.0/24 located in Availability Zone ap-southeast-1b  You can see there is 2 columns Availability Zone and Availability Zone ID. To avoid EC2 resources being used unevenly, (we tend to use AZ a to run primary and AZ b to stand by for example) AWS will randomly assign * Availability Zone into Availability Zone ID*. We can understand that Availability Zone is an alias, and Availability Zone ID is the identifier. For example, in the image above, Availability Zone ap-southeast-1a is assigned the Availability Zone ID apse1-az2. In another AWS account, the Availability Zone ap-southeast-1a may have an Availability Zone ID of apse1-az1.\n\rAllows automatic allocation of public IP addresses for 2 public subnets. Another point worth noting is that the subnets are the same, through configuring the routeing table and allocating a public IP address that we have just divided into Public and Private Subnet.\n\r In the VPC interface\n Select Subnets Select Public Subnet 1 Select Actions Select Edit subnet settings     Under Auto-assign IP settings\n Select Enable auto-assign public IPv4 address Select Save    Then do the same with Public subnet 2.  "
},
{
	"uri": "/5-vpnsitetosite/5.1-createvpnenv/5.1.2-createec2vpn/",
	"title": "Creating EC2 Instance",
	"tags": [],
	"description": "",
	"content": "Create EC2 as a Customer Gateway   Access to VPC\n Select Security Group Select Create security group     In the Create security group interface\n Security group name, enter VPN Public -SG In the Description section enter Allow IPSec, SSH, and Ping for servers in public subnet. VPC, select ASG VPN vpc     Configure Inbound rules\n Select Add rule Select Type: SSH and Source: My IP. My IP represents a public IPv4 address you are using. Click Add rule to add a new rule. Select Type: All ICMP IPv4 and Source: Anywhere. Allow ping from any IP address. Click Add rule to add a new rule. Select Type: Custom UDP , Port:400 and Source : Anywhere. Click Add rule to add a new rule. Select Type: Custom TCP , Port:500 and Source : Anywhere    Check Outbound rules and select Create security group  Complete creation of VPN Public - SG. So we have created a Security Group. Next, we will proceed to create an EC2 server that plays the Customer Gateway role.   Access to EC2\n Select Instances Select Launch instances     In the Launch instances interface\n Name, enter Customer Gateway instance     Executing AMI Selection\n Select Quick Start Select Amazon Linux Select AMI    Select Instance type and select Key pair: aws-keypair(keypair created with instances)   Configure Network\n VPC, select ASG VPN vpc Subnet, select VPN Public Auto-assign public IP, select Enable Firewall, select Select existing security group Select VPN Public - SG Check again and select Launch instance     Finish creating EC2 instance\n Select View all instances    View details Customer Gateway instance  "
},
{
	"uri": "/2-firewallinvpc/",
	"title": "Firewall in VPC",
	"tags": [],
	"description": "",
	"content": "Firewall in VPC In this section, we will learn the basic security features in Amazon VPC such as the Security Group firewall feature and Network Access Control Lists. A security group acts as a virtual firewall for the EC2 Instance, helping to control network traffic. An Instance in VPC can be assigned up to 5 Security groups because SG only works at the Instance layer and not at the Subnet layer.\nSecurity groups operate at the virtual machine level, not the subnet level. However, each virtual machine in a subnet can be assigned to different security groups.\n\rA network access control list (ACL) is an optional security layer for VPCs that acts as a firewall to control incoming and outgoing traffic for one or more subnets. You can set up network ACLs with the same rules as security groups, to add an extra layer of security to the VPC.\nContent  Security groups Network ACLs  "
},
{
	"uri": "/2-firewallinvpc/2.2-networkacls/",
	"title": "Network ACLs",
	"tags": [],
	"description": "",
	"content": "Network ACLs  VPC after initialization will have a default network ACL available and can be modified. By default, it grants access to all IPv4 or IPv6 traffic that may go in or out of the VPC. Can create a custom network ACL and associate it with a subnet. By default, custom network ACLs deny all incoming and outgoing traffic, until we add an access permission rule. Each subnet in the VPC must be associated with a network ACL. If the subnet is not associated with a specific network ACL, the subnet is automatically associated with the default network ACL. A network ACL can be associated with multiple subnets. However, a subnet can only be associated with one network ACL at a time. When a new network ACL is associated with a subnet, the previous association is deleted. A network ACL contains a list of differently numbered rules. AWS evaluates rules based on their assigned sequence number, starting with the lowest numbered rule, to determine if traffic is allowed in or out of any subnets associated with the network ACLs. . The largest sequence number that can be assigned to a rule is 32766 (equivalent to the maximum number of rules for a network ACL is 32766). The Network ACL has separate entry and exit permission rules and the rule can be to allow or deny traffic. Network ACL is a Stateless service, which means that responses to traffic that are allowed in must follow the rules for outbound traffic (and vice versa).  Network ACL rules You can add or remove a rule from the default network ACL or create a new network ACL for the VPC. When adding or removing a rule from the network ACL, the changes are automatically applied to the subnets associated with it.\nComponents of a network ACL rule:\n Rule number. The starting rule is evaluated starting with the rule with the lowest sequence number. As soon as that rule matches traffic, it will immediately be applied even if it conflicts with a higher-numbered rule in the list. Type.traffic type, eg SSH. All traffic types or custom ranges can be specified. Protocol. specify the protocol with the standard protocol number. Port range. port or port range listening for traffic. For example, HTTP is 80. Source. [Inbound rule only] Origin of traffic (value is CIDR range). Destination. [Outbound rule only] Destination of traffic (value is CIDR range). Allow/Deny. specify Allow or Deny traffic.  "
},
{
	"uri": "/1-introduce/1.2-routetable/",
	"title": "Route Table",
	"tags": [],
	"description": "",
	"content": "Route Table The Route Table, also known as the routing table, provides routing instructions and is assigned to the Subnets. For example, when you create a VPC with network layer 10.10.0.0/16, with 2 subnets 10.10.1.0/24,10.10.2.0/24, each default subnet will be assigned a default route table.\nInside the route table there will be a route entry destination:10.10.0.0/16 target:local. This route entry shows that resources created in the same VPC can be connected to each other.\n"
},
{
	"uri": "/4-createec2server/4.2-connectec2/",
	"title": "Test Connection",
	"tags": [],
	"description": "",
	"content": "Checking connection There are many ways to connect to EC2, you can refer to connect EC2 with PuTTY. In the lab, we use MobaXterm to connect EC2\n\r Download MobaXterm   Go to the EC2 page\n Select Instances Select EC2 Public Select Details View Public IPv4 address     After downloading MobaXterm, extract and open\n Select Session     In the Session settings interface\n Select SSH     In the Session settings interface\n Remote host, enter Public IPv4 address Specify username, enter ec2-user Use private key, choose the path of aws-keypair.pem created and download at EC2 creation.    Connection successful.  Check the connection to the internet of EC2 Public, we execute the command:  ping amazon.com -c5 Make a ping to EC2 private  ping \u0026lt;IP Private EC2 Private\u0026gt; Connect to the EC2 Private server and check the internet connection.  Access to EC2\n Select Instances Select EC2 Private Select Details Select Private IPv4 addresses Then connect SSH to EC2 Public    Do a ping \u0026lt;EC2 Private\u0026rsquo;s private IP address\u0026gt; to test the connection from the EC2 Public server to the EC2 Private server. We test the connection between two EC2 instances with the command:  ping 10.10.4.105 -c5  EC2 Private will not have a public IP address because we are not assigning this server a public IP. To be able to ssh into EC2 Private, we will make an ssh connection from EC2 Public through EC2 Private private IP address\n Download the pscp tool to the same folder containing the aws-keypair.ppk file to copy the aws-keypair.pem file from our computer to EC2 Public .    You download an RSA and DSA key generation utility as puttygen.exe\n\rYou download an SCP client, i.e. command-line secure file copy is pscp.exe\n\r We use puttygen.exe to generate key\n Select Load     Select aws-keypair.pem\n Select OK Select Save private key with the name aws-keypair.ppk    Complete the generation key   Launch Command Prompt. Change the path to the folder you just downloaded pscp. Run the command below to upload the aws-keypair.pem file to the /home/ec2-user/ directory of the EC2 Public server.\n You will need to replace the public IP address of EC2 Public parameter before running the command.    pscp -i aws-keypair.ppk aws-keypair.pem ec2-user@\u0026lt;EC2 PUBLIC public IP address\u0026gt;:/home/ec2-user/  Access to EC2\n Select Instances Select EC2 Public Select Details View Public IPv4 address    Return to the EC2 connection interface. Make sure you copy the aws-keypair.pem file to the EC2 Public server, we execute the command  ls Update the permissions for the aws-keypair.pem file by running the chmod 400 aws-keypair.pem command. AWS requires the key pair file to be restricted before it can be used to connect to the EC2 server.  chmod 400 aws-keypair.pem SSH to EC2 Private server  ssh -i aws-keypair.pem ec2-user@\u0026lt;EC2 Private server\u0026#39;s private IP address\u0026gt; Perform ping test to amazon.com. As you can see, we cannot connect internet from EC2 Private. In the next step, we will create NAT Gateway to allow the EC2 Private server to connect to the internet in the outbound direction. Keep the connection to EC2 Private so that we can check the connection to internet after finishing creating and configuring NAT Gateway.  ping amazon.com "
},
{
	"uri": "/3-prerequiste/3.3-createigw/",
	"title": "Create Internet Gateway",
	"tags": [],
	"description": "",
	"content": "Create an Internet Gateway   In the VPC interface\n Select Internet Gateways Select Create internet gateway     Make a configuration\n Name tag, enter Internet Gateway Select Create internet gateway    Finish creating Internet Gateway   Implement Attach VPC\n Select Actions Select Attach to VPC Select ASG, VPC ID will be automatically filled in. Select Attach internet gateway    When attach successfully State internet gateway will switch to Attached  "
},
{
	"uri": "/4-createec2server/4.3-natgateway/",
	"title": "Create NAT Gateway",
	"tags": [],
	"description": "",
	"content": "Create NAT Gateway Generate an Elastic IP address   Access EC2\n Select Elastic IPs Select Allocate Elastic IP address     In the Allocate Elastic IP address interface\n Public IPv4 address pool, select Amazon\u0026rsquo;s pool of IPv4 addresses Select Allocate    We have successfully created a Public IP Address   Access to VPC\n Select NAT Gateways Create NAT gateway     In NAT gateway interface\n Name, enter NAT gateway Subnet, select Public subnet 2 Connectivity type, select Public Elastic IP allocation ID, select Elastic IP just created.    Select Create NAT gateway  Successfully created NAT gateway  Create Route table - Private and assign to private subnets.  In the VPC interface\n Select Route Tables Select Create route table     In the Route table interface\n Name, enter Route table - Private VPC, select ASG vpc Select Create route table    Finish creating Route table - Private   In the Route table - Private interface\n Select Subnet Associations Select Edit subnet associations     In the Edit subnet associations interface\n Choose 2 private subnets Select Save associations     In the Route table - Private interface\n Select Routes Select Edit routes     In the Edit routes interface\n Select Add route Select Destination: 0.0.0.0/0 Target: NAT Gateway Select Save changes    Double check Routes  Test ping amazon.com successfully from EC2 Private.  ping amazon.com -c5 "
},
{
	"uri": "/5-vpnsitetosite/5.2-vpnsitetosite/5.2.3-createvpnconnection/",
	"title": "Create VPN Connection",
	"tags": [],
	"description": "",
	"content": "Create a VPN connection   Access VPC\n Select Site-to-Site VPN Connections Select Create VPN Connection     In the Create VPN Connection interface\n Name tag, enter VPN Connection Target Gateway Type: Select Virtual Private Gateway Virtual Private Gateway: Select VPN Gateway Customer Gateway: Existing Customer Gateway ID: Select Customer Gateway     Continue to perform configuration\n Routing Options: Static Static IP Prefixes: 10.11.0.0/16. This is the IP address resolution in a simulated On-premise environment. Other configurations keep the default.    Select Create VPN Connection  Wait about 5 minutes, to finish creating VPN Connection   Configure propagation for route tables\n In the VPC interface, select Route Tables Select Route table - Public Select Route Propagation Select Edit route propagation     In the Edit route propagation interface\n Select Enable Select Save    Complete and recheck Route Propagation has changed to Yes  Similar Route Propagation for Private subnet.  "
},
{
	"uri": "/1-introduce/1.3-internetgateway/",
	"title": "Internet Gateway",
	"tags": [],
	"description": "",
	"content": "Internet Gateway   The Internet Gateway (IGW) is an Amazon VPC component that enables resources within the VPC, specifically EC2, to communicate with the Internet. IGW has strong horizontal elasticity, and high redundancy and availability. It acts as a target in the Amazon VPC\u0026rsquo;s routing table, helping traffic to be routed outside the Internet by translated EC2\u0026rsquo;s network address into the Public IP address it has been assigned.\n  More specifically, EC2 Instances inside the VPC only know the Private IP addresses assigned to it, but when there is traffic sent from EC2 out to the Internet, the IGW will translate that Private IP address into a Public IP address ( or EIP addresses, discussed later) that are assigned to EC2, and maintain a 1-1 mapping until the Public IP address is released.\n  When EC2 receives traffic from outside the Internet, the IGW translates the Target address (Public IP address) into the EC2 Instance Private IP address and forwards the traffic to the Amazon VPC.\n  "
},
{
	"uri": "/3-prerequiste/",
	"title": "Preparatoration steps",
	"tags": [],
	"description": "",
	"content": "Preparation steps In this exercise, we will build a model according to the diagram below:\nContent  Create VPC Create Subnet Create Internet Gateway Create Route Table Create Security Group  "
},
{
	"uri": "/4-createec2server/",
	"title": "Create EC2 Server",
	"tags": [],
	"description": "",
	"content": "Create EC2 server In this step, we will create 2 EC2 servers ( EC2 instances ) like the architecture below.\nContent  [Create EC2] server(4.1-createec2/) Test Connection Create NAT Gateway Using Reachability Analyzer  "
},
{
	"uri": "/3-prerequiste/3.4-cretaeroutetable/",
	"title": "Create Route Table",
	"tags": [],
	"description": "",
	"content": "Create Route Table to route outbound internet through Internet Gateway.   In the VPC interface\n Select Route Tables Select Create route table     Configure Route table\n Name, enter Route table-Public VPC, select ASG VPC. VPC id will be automatically filled in. Select Create route table    Finish creating Route table   Execute Edit route\n Select Actions Select Edit routes     In the Edit routes interface\n Select Add route Fill in the Destination CIDR : 0.0.0.0/0 representing the Internet. In the Target section select Internet Gateway, then select the Internet Gateway we created. Internet Gateway ID will be automatically filled in. Select Save changes    Complete and recheck Routes   Make sure Route table - Public is selected.\n Select subnet associations Select Edit subnet associations     In Edit subnet associations step\n Expand the Subnet ID column by dragging the pane to the right. Select the correct 2 public subnet we have created.    Select Save associations  Complete and recheck Subnet associations  "
},
{
	"uri": "/5-vpnsitetosite/5.2-vpnsitetosite/5.2.4-configurecustomergw/",
	"title": "Customer Gateway Configuration",
	"tags": [],
	"description": "",
	"content": "Configure Customer Gateway   Access to VPC\n Select Site-to-Site VPN Connection Select VPN Connection created Select Download Configuration     In the Download Configuration dialog, choose appliance that is right for you: In this exercise, we will use OpenSwan.\n Vendor: Select OpenSwan Platform: Select OpenSwan Software: Select OpenSwan 2.6.38+ IKE version: Select ikev1 Select Download.     Save the image file information to the folder we use to store the key pair and tools for the lab.\n Then based on the provided configuration, you change the appropriate information and configuration for your device.     Connect ssh to EC2 Customer Gateway.  Install OpenSwan  sudo su\ryum install openswan -y Check the configuration file /etc/ipsec.conf  vi /etc/ipsec.conf  Check the configuration is as shown below.   Press the ESC key and the combination :q! to exit the vi editor.  Configuration file /etc/sysctl.conf  vi /etc/sysctl.conf  Move down to the last position in the configuration file. Press the i key to proceed with editing the file. Add the following configuration at the end of the configuration file.  net.ipv4.ip_forward = 1\rnet.ipv4.conf.all.accept_redirects = 0\rnet.ipv4.conf.all.send_redirects = 0 Then to apply this configuration, run the command:  sysctl -p Next we will configure the file /etc/ipsec.d/aws.conf  vi /etc/ipsec.d/aws.conf  Press i to proceed to edit the file. Add the following configuration to the configuration file. We will create 2 Tunnel with information taken from the VPN Connection configuration file you downloaded and saved in the folder containing the key pair earlier. Make sure you edit the IP address and network class accordingly before copying the above configuration. For Amazon Linux, we will omit the auth=esp line in the original configuration file. Since we only have 1 public IP addres for Customer Gateway, we will need to configure overlapip=yes. leftid: IP Public Address on the Onprem side. (Here is public IP of EC2 Customer Gateway in ASG VPN VPC) . right: IP Public Address on AWS VPN Tunnel side. leftsubnet: CIDR of Local Side Network (If there are multiple network layers, you can leave it as 0.0.0.0/0). rightsubnet: CIDR of Private Subnet on AWS.  conn Tunnel1\rauthby=secret\rauto=start\rleft=%defaultroute\rleftid=13.229.235.99\rright=52.220.214.148\rtype=tunnel\rikelifetime=8h\rkeylife=1h\rphase2alg=aes128-sha1;modp1024\rike=aes128-sha1;modp1024\rkeyingtries=%forever\rkeyexchange=ike\rleftsubnet=\u0026lt;LOCAL NETWORK\u0026gt;\rrightsubnet=\u0026lt;REMOTE NETWORK\u0026gt;\rdpddelay=10\rdpdtimeout=30\rdpdaction=restart_by_peer\roverlapip=yes\rconn Tunnel2\rauthby=secret\rauto=start\rleft=%defaultroute\rleftid=13.229.235.99\rright=54.179.66.207\rtype=tunnel\rikelifetime=8h\rkeylife=1h\rphase2alg=aes128-sha1;modp1024\rike=aes128-sha1;modp1024\rkeyingtries=%forever\rkeyexchange=ike\rleftsubnet=\u0026lt;LOCAL NETWORK\u0026gt;\rrightsubnet=\u0026lt;REMOTE NETWORK\u0026gt;\rdpddelay=10\rdpdtimeout=30\rdpdaction=restart_by_peer\roverlapip=yes  Press the ESC key and the combination :wq! to save the configuration file.  Check the next step in the configuration file we downloaded.   Create and configure the file etc/ipsec.d/aws.secrets Create a new file with the following configuration to set up authentication for the 2 Tunnels.\n Run the command touch /etc/ipsec.d/aws.secrets to create the file.    touch /etc/ipsec.d/aws.secrets - Run the command **vi /etc/ipsec.d/aws.secrets**\r vi /etc/ipsec.d/aws.secrets  Press the i key to edit the file.\n Add the following configuration to the end of the configuration file (this configuration is in step 5 of IPSEC Tunnel #1 and IPSEC Tunnel #2)    13,229,235.99 52,220,214,148: PSK \u0026#34;zkq_xvwpA5HNictmh6x6tVCKozVHxcpA\u0026#34;\r13,229,235.99 54,179,66,207: PSK \u0026#34;c0WdOkBj4gtJ2jaGrmeA2bZ_4ZaN50o3\u0026#34; - Press the **ESC** key and the combination **:wq!** to save the configuration file.\r- Run the command **cat /etc/ipsec.d/aws.secrets** to check the content of the configuration file\r Restart Network service \u0026amp; IPSEC service  service network restart\rchkconfig ipsec on\rservice ipsec start\rservice ipsec status  If the status tunnel is still not running correctly, after checking and updating the configuration you will need to run the command to restart service network and IPsec :  sudo service network restart\rsudo service ipsec restart After completing the configuration.Try to ping from the Customer Gateway server side to the EC2 Private server. If the VPN configuration is successful you will get the result as below.  ping \u0026lt;EC2 Private IP\u0026gt; -c5 After completing the configuration.Try to ping from the EC2 Private server side to the Customer Gateway server. If the VPN configuration is successful you will get the result as below.  ping \u0026lt;Customer gateway instance IP\u0026gt; -c5 "
},
{
	"uri": "/1-introduce/1.4-natgateway/",
	"title": "NAT Gateway",
	"tags": [],
	"description": "",
	"content": "NAT Gateway   By default, any EC2 running inside a Private subnet will not be able to communicate with the Internet through the IGW. From there the problem arises when that EC2 needs to go outside of the Internet to apply security updates, download patches, or update application software. Understanding that need, AWS provides 2 methods that allow EC2s inside Private subnet to have access to the Internet, namely NAT Instance and NAT Gateway. For common cases, we should use NAT Gateway instead of NAT Instance. NAT Gateway ensures higher availability and bandwidth and requires less administrative effort than NAT Instance.\n  To create a NAT gateway, you must specify a subnet (public) and an Elastic IP address. Make sure the Elastic IP address is not associated with any other Instance or Network interface.\n  In case we want to migrate from a NAT instance to a NAT gateway, we can reuse the Elastic IP address of the NAT instance. But first, we need to separate the IP address from the NAT Instance.\n  Neither the NAT Gateway nor the NAT instance supports direct inbound traffic from the internet.\n\r"
},
{
	"uri": "/4-createec2server/4.4.-createreachabilityanalyzer/",
	"title": "Using Reachability Analyzer",
	"tags": [],
	"description": "",
	"content": "Using Reachability Analyzer   Access to VPC interface\n Select Reachability Analyzer Select Create and analyze path     Implement Path Configuration\n Name tag, enter EC2 private with EC2 Public For Source type, select Instance Select source as EC2 Public For Destination type, select Instance For Destination, select EC2 Private The remaining parameters are left to default. Select Create and analyze path    Wait 5 minutes will show the Reachable status  Then see path details.  View reverse path details.  "
},
{
	"uri": "/5-vpnsitetosite/",
	"title": "Configuring Site to Site VPN",
	"tags": [],
	"description": "",
	"content": "We can connect the On-premise data center to Amazon VPC using a hard or soft VPN depending on the purpose and actual use needs. To establish a Site-to-Site VPN connection, we will need to create and configure a Virtual Private Gateway VPG and Customer Gateway CGW.\n Virtual Private Gateway (VPG) is a control center connecting the virtual private network (VPN) installed on top of AWS. A Customer Gateway (CGW) is the component representing the hard or soft VPN device installed at the Client end.  VPN tunnel will be established as soon as data traffic is transferred between AWS and the customer\u0026rsquo;s network. In that connection, you must specify the type of routing that will be used to ensure the safety and quality of data transmission. If the CGW on the client side supports Border Gateway Protocol (BGP), then in the VPN connection configuration we are required to set the routing to dynamic routing. Otherwise, we must configure the connection routing as static routing. In the case of using static routing, you must enter the exact routes required for the connection from the Client side to the VPG set up at the AWS end. Also, routing for the VPC must be configured to propagate to allow resources to exchange data in and out of the VPN tunnel connection between AWS and the Customer\u0026rsquo;s network.\nAmazon VPC offers many types of CGWs, and each CGW is assigned to a VPG, but 1 VPG can be associated with multiple CGWs (many-to-one design). To support this model, the CGW\u0026rsquo;s IP address must be unique within a region. Amazon VPC also provides the necessary information for Network Administrators to be able to configure the CGW and establish a VPN connection to the VPG on AWS. VPN connection always includes 2 Internet Protocol Security (IPSec) tunnels to ensure high availability of the connection. Below are the important features that we need to know about VPG, CGW, and VPN:\n VPG is the terminal component of the VPN tunnel located on AWS. CGW can be a hardware device or a software application located at the Client end in the VPN tunnel connection. You must initiate a VPN tunnel connection from CGW to VPG. VPG supports both dynamic routing (BGP) and static routing. VPN connection always has 2 tunnels to ensure high availability for connection to VPC from the Client site.  The lab helps us learn how to set up a Site-to-Site VPN connection in AWS. This solution is quite popular due to the advantages of low cost, and ease of configure because AWS provides instructions for each type of device at the Customer end. The customer\u0026rsquo;s only concern is to prepare the internet from which to create a secret secure tunnel (using IPSec) connecting to AWS through the AWS VPN tunnel. In the scope of the lab, assume that we have the Main office ( VPC ASG ) and Branch office ( VPC ASG VPN ) located at 2 VPCs belonging to 2 different AZs to have a difference in terms of the network. On each VPC doing EC2 creation allows external SSH but without the ability to connect and ping each other using each EC2\u0026rsquo;s Private IP address. All we need to do is configure the VPN so that the Private IP addresses can ping each other using the Site-to-Site VPN.\nContent:\n Create ASG VPN VPC and subnet Configure Site to Site VPN and test connection with private IP   "
},
{
	"uri": "/3-prerequiste/3.5-createsecuritygroup/",
	"title": "Create Security Group",
	"tags": [],
	"description": "",
	"content": "Create Security Group Create Security Group for servers located in Public subnet   In the VPC interface\n Select Security Group Select Cretae security group     Configure Security group\n Security Group name, enter Public subnet - SG Description, enter Allow SSH and Ping for servers in private subnet. Select ASG VPC     Configure Inbound rules\n  In Inbound rules, click Add rule.\n  Select Type: SSH and Source: My IP. My IP represents 1 public IPv4 address you are using (will change when you change network)\n  Select Add rule to add a new rule.\n  Select Type: All ICMP - IPv4 and Source: Anywhere. Allow ping from any IP address.\n    Check Outbound rules and select Cretae security group  Complete the creation of security group for the server located in the Public subnet  Create a Security Group for a server located in a Private subnet  In the VPC interface\n Select Security Groups Select Create security group     Configure Security group\n  In the Security group name field enter Private subnet - SG\n  In the Description section enter Allow SSH and Ping for servers in private subnet.\n  select VPC, select VPC named ASG.\n     Configure Inbound rules\n  In Inbound rules, select Add rule.\n  Select Type: SSH and leave Source: Custom. Check the search box and select Public subnet SG. This option allows all servers assigned Public subnet SG to be SSH to the servers assigned to Private subnet SG. **.\n     Select Add rule to add a new rule.\n     Select Type: All ICMP IPv4 and Source: Anywhere. Allow ping from any IP address.             Select Create security group\n  So we have created 2 Security Group for servers located in public subnet and private subnet.   Next we will proceed to create 2 EC2 servers.  "
},
{
	"uri": "/5-vpnsitetosite/5.2-vpnsitetosite/5.2.5-modifyvpn/",
	"title": "Modify AWS VPN Tunnel",
	"tags": [],
	"description": "",
	"content": "Modify AWS VPN Tunnel   Access to VPC interface\n Select Site-to-Site VPN connections Select VPN just created. Select Actions Select Modify VPN tunnel options    Select VPN Tunnel outside IP address  Select Confirm UP tunnel modification and the rest of the parameters are default.   For Tunnel activity log, select Enable\n Select Amazon CloudWatch log group (if not already you can create in CloudWatch) For Output format, select text Select Save changes     Access to CloudWatch\n Select Log groups Select Log streams Select a stream.    Go to Log events  You do the same with the remaining tunnel.  Make sure both tunnels are UP  "
},
{
	"uri": "/6-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Clean up resources We will proceed to delete the resources in the following order\nTerminate EC2 Instances.  Terminate EC2 instance.  Access the Amazon EC2 console at EC2. On the left navigation bar, select Intances Select all EC2 Instances related to the lab. Select Instance state Select Terminate instance    Confirm terminate.  Remove NAT Gateway and Elastic IP Address  Remove NAT Gateway and Elastic IP Address. AWS charges for wasted EIPs, so you need to double-check to avoid unintended charges. Visit the Amazon VPC console page at VPC On the left navigation bar, click NAT Gateway. Select NAT Gateway. Click Action. Click Delete NAT Gateway.   Type delete. Click Delete to confirm deletion of NAT Gateway  Delete delete Elastic IP Address.  Continue to delete Elastic IP Address. Visit the Amazon VPC console page at https://console.aws.amazon.com/vpc/ On the left navigation bar, click Elastic IP. Select the Elastic IP Address we created. Click Action. Click Release Elastic IP Address Click Release.  Continue to do the same and delete in the following order:  VPN Site to Site connection.   Virtual Private Gateway.   Customer Gateway.   VPC ASG VPN   VPC ASG.  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]