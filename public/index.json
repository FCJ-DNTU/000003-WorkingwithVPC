[
{
	"uri": "/",
	"title": "Working with Amazon VPC",
	"tags": [],
	"description": "",
	"content": "Work with Amazon VPC Overview In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon VPC (Virtual Private Networking). Learn key concepts and features in Amazon VPC. Practice creating a basic VPC and configuring a Site to Site VPN to connect an on-premise environment to an AWS VPC environment.\nContent  Introducing VPC Firewall in VPC Create Basic VPC Site-to-Site VPN Configuration Resource Cleanup  "
},
{
	"uri": "/4-vpn-sitetosite/4.2-config-vpn/4.2.1-create-vgw/",
	"title": "Create Virtual Private GW",
	"tags": [],
	"description": "",
	"content": " Go to the Amazon VPC console page at https://console.aws.amazon.com/vpc/.   Drag down the right navigation bar. Click Virtual Private Gateway. Click Create Virtual Private Gateway.   At the Create Virtual Private Gateway page:   Fill in information Name tag: VPN Gateway Click Create Virtual Private Gateway  Click Close.  In the list of Virtual Private Gateway, select the VPN Gateway just created.   Select Actions \u0026gt; Attach to VPC. Select VPC ASG. Click Yes, Attach.   Note: according to the architectural model, the Virtual Private Gateway will reside in the VPC on the AWS environment. Currently, we are using VPC ASG to act as the AWS environment and VPC ASG VPN to emulate the on-premise environment. (Traditional Data Center)\n\r"
},
{
	"uri": "/3-create-vpc/3.1-vpc-subnet/",
	"title": "Create VPC and Subnet",
	"tags": [],
	"description": "",
	"content": "First we will proceed to create a VPC and 4 subnets, like the architecture below. Create an Amazon Virtual Private Cloud (VPC)  Access the Amazon VPC console at https://console.aws.amazon.com/vpc/ In the navigation pane, Select Your VPCs, Create VPC.   Name tag enter VPC name: ASG IPv4 CIDR block Enter the IP block range of the VPC : 10.10.0.0/16 Click Create VPC.  The Tennacy configuration section we will leave the default mechanism. If we switch to Dedicated there will be some EC2 Instance type mismatch and will not be created in VPC with tennacy mode of Dedicated\n\rCreate subnets   Access Amazon VPC console.\n  On the left navigation bar, select Subnets.\n  Select Create Subnet.   Select the VPC named ASG we just created.\n  Name tag enter the name of the subnet: Public Subnet 1\n  Select Availability Zone: ap-southeast-1a\n  Select IPv4 CIDR block as 10.10.1.0/24 according to the architecture description.   Drag the screen down, click Create subnet to proceed to create Public subnet 1 with CIDR of 10.10.1.0/24 located in Availability Zone ap-southeast-1a .\n  Do the same to create 3 more subnets including:\n Public subnet 2 with CIDR of 10.10.2.0/24 located in Availability Zone ap-southeast-1b. Private subnet 1 with CIDR of 10.10.3.0/24 located in Availability Zone ap-southeast-1a. Private subnet 2 with CIDR of 10.10.4.0/24 located in Availability Zone ap-southeast-1b.     You can see there are 2 columns, Availability Zone and Availability Zone ID. To avoid the uneven use of EC2 resources, (we tend to use AZ a to run primary and AZ b to stand by for example) AWS will randomly assign Availability Zone to Availability Zone ID. We can understand that Availability Zone is a form of alias, and Availability Zone ID is the identifier. For example in the image above Availability Zone ap-southeast-1a is assigned Availability Zone ID as apse1-az2. In another AWS account, the Availability Zone ap-southeast-1a may have an Availability Zone ID of apse1-az1.\n\rAnother point worth noting is that the subnets are basically the same, through configuring the route table and allocating the public IP address that we have categorized them into Public and Private Subnet.\n\rAllows automatic allocation of public ip addresses for 2 public subnets.   Click on Public subnet 1.\n  Click action.\n  Click Modify auto-assign IP settings.   Click Enable auto-assign public IPv4 address and Click Save.   Do the same for Public subnet 2.\n  "
},
{
	"uri": "/2-secure-feature/2.1-secgroup/",
	"title": "Security Group",
	"tags": [],
	"description": "",
	"content": "Security Group Some basic features of Security group:\n Only Allow rules can be added, Deny rules cannot be added. Separate rules for outgoing or incoming traffic can be specified. A newly created Security group has no Inbound rules available. Therefore, at the beginning Instance will not allow any traffic to enter, requiring us to add an Inbound rule to allow access. By default, the Security group has an Outbound rule that allows all traffic to go out of the Instance. This rule can be edited (deleted) and added with specific Outbound rules, specifying which traffic originating from the Instance is allowed to go out. If the SG does not have an Outbound rule, then no traffic is allowed to leave the Instance. Security groups is a Stateful service - meaning that if traffic going into the Instance is allowed, then the traffic can also go out of the Instance, and vice versa, regardless of the Outbound rule. Instances can only communicate with each other if and only if they are associated with a Security group that allows connections, or a Security group to which the Instance is associated contains a Rule that allows traffic (except for the default Security group. with default rules that allow all traffic to be accessed). Security groups are associated with network interfaces. After the Instance has been initialized, you can still change the Security group assigned to the Instance, which also changes the security group assigned to the corresponding primary network interface.  Security group Rule Rule is generated to grant access to traffic entering or leaving the Instance. This access can be applied to a specific CIDR or to a Security group located in the same VPC or located in another VPC but with a peering connection already initiated.\nBasic components of Security group rule:\n (Inbound rules only) includes the origin (source) of the traffic and the destination port or port range. The source can be another security group, an IPv4 or IPv6 CIDR range, or simply an IPv4 or IPv6 address. (Outbound rules only) includes the destination of the traffic and the destination port or destination port range. The destination can be another security group, an IPv4 or IPv6 CIDR range, or simply an IPv4 or IPv6 address, or a service that begins with a prefix (e.g. igw_xxx) in the prefix ID list (a service is identified by the prefix ID - the name and ID of the service available in the region). Every protocol has some standard protocol. Example: SSH is 22,..  "
},
{
	"uri": "/1-vpc-introduction/1.1-subnets/",
	"title": "Subnets",
	"tags": [],
	"description": "",
	"content": "Subnets A subnet is a segment of the IP address range that you use when you provision your Amazon VPC, which directly provides the active network range to the AWS resources that may run within it, such as Amazon EC2, Amazon RDS (Amazon Relationship Database). ),\u0026hellip; Subnets are also identified through CIDR blocks (eg 10.0.1.0/24 and 192.168.0.0/24) and the subnet\u0026rsquo;s CIDRs must be in the VPC\u0026rsquo;s CIDR. The smallest subnet that can be created is /28 (16 IP addresses). AWS stores the first 4 IP addresses and the last 1 IP address of each subnet for intranet networking purposes. For example, subnet /28 has 16 available IP addresses, but removes 5 reserved IPs for AWS, leaving 11 usable IP addresses for resources operating within this subnet.\nAvailability Zone or abbreviated to AZ is a one or multi data center, located within Region and identified based on geographical location. Within an AZ there can be one or more subnets, but a subnet can only reside in a single AZ and cannot extend to other AZs.\nSubnets are divided into categories such as Public, Private, or VPN-only. Public subnet is a subnet with a route table (discussed later) that directs traffic within the subnet to the VPC IGW (discussed later) The Private subnet is the opposite of the Public subnet, which does not have a route table that directs traffic to the VPC IGW. VPN-only subnet is a subnet that has a route table that directs traffic to Amazon VPC\u0026rsquo;s VPG (discussed later).\nRegardless of the type of subnet, the subnet\u0026rsquo;s internal IP address range is always private (that is, from outside the Internet it is not possible to directly connect to addresses in this range).\n"
},
{
	"uri": "/4-vpn-sitetosite/4.1-deploy-infra/",
	"title": "Create a VPN environment",
	"tags": [],
	"description": "",
	"content": "Before creating and configuring the Site to Site VPN connection, we need to create a simulation branch environment (ASG VPN) like the architecture below.\nContent:\n Create ASG VPN VPC, 2 subnets, Internet Gateway Initiate EC2 on ASG VPN VPC  "
},
{
	"uri": "/4-vpn-sitetosite/4.1-deploy-infra/4.1.1-create-asg-vpn-vpc/",
	"title": "Create ASG VPN VPC",
	"tags": [],
	"description": "",
	"content": "Create ASG VPN VPC  Access the Amazon VPC console at https://console.aws.amazon.com/vpc/ In the navigation pane, Select Your VPCs, Create VPC.   Name tag enter the VPC name: ASG VPN IPv4 CIDR block fill in the IP block range of the VPC: 10.11.0.0/16 Click Create VPC.   The Tennacy configuration section we will leave the default mechanism. If we switch to Dedicated there will be some EC2 Instance type mismatch and will not be created in VPC with tennacy mode of Dedicated\n\rOn the left navigation bar, select Subnets. Select Create Subnet.   Select the VPC named ASG VPN we just created. Name tag enter subnet name: VPN Public Select Availability Zone: ap-southeast-1a Select IPv4 CIDR block as 10.11.1.0/24 according to the described architecture.  Scroll down, click Create subnet to proceed with creating VPN Public with CIDR of 10.11.1.0/24 located in Availability Zone ap-southeast-1a.  In the subnet management interface.   Click on VPN Public. Click action. Click Modify auto-assign IP settings.  Click Enable auto-assign public IPv4 address and Click Save.  Create an Internet Gateway for ASG VPC VPN  Access the Amazon VPC console. On the left navigation bar, select Internet Gateways, Create Internet Gateways   Name the Internet Gateway as Internet Gateway. Click Create Internet Gateway.  Next we need to Attach Internet Gateway to VPC ASG VPN.   Click Action. Click Attach to VPC. Click on VPC ASG VPN , VPC ID will be automatically filled in. Click Attach Internet Gateway.   Next we need to create a Route Table that routes out to the internet through the Internet Gateway.   On the left navigation bar, select Route Tables, Create Route Table  Enter the Route Table name in the Name tag section: Route table VPN - Public.   Select VPC named ASG VPN , VPC id will be automatically filled in. Click Create.  Click Close.  Select Route table VPN - Public, click Action , click Edit routes.   Click Add route. Fill in the Destination CIDR : 0.0.0.0/0 representing the Internet. In the Target section, click Internet Gateway, then select the Internet Gateway we created. The Internet Gateway ID will be automatically filled in. Select Save routes  Make sure Route table - Public is selected.   Click on the Subnet Associations tab in the menu below. Click Edit subnet associations. Expand the Subnet ID column by dragging the pane to the right. Select subnet VPN Public. Click Save.    So we have done:  Create Internet Gateway named Internet Gateway. Create a Route table named Route table VPN - Public. Edit route in route table Route table VPN - Public.  Add route entry Destination: 0.0.0.0/0 Target: Internet Gateway.   Associate Route table VPN - Public to subnet VPN Public.    "
},
{
	"uri": "/1-vpc-introduction/",
	"title": "Introduction of Amazon VPC",
	"tags": [],
	"description": "",
	"content": "Introduction of Amazon VPC Amazon Virtual Private Cloud (Amazon VPC) is a “Virtual Private Cloud” which is a custom virtual network located inside the AWS Cloud and isolated from the entire outside world. The concept is similar to designing and implementing a separate standalone network environment in an on-premise data center, which is still very popular today in many countries of the world.\nInside that custom VPC, you have full control over your virtual network environment, meaning both the ability to initialize and run AWS resources and the ability to select IP address ranges, create networks subnets and configure routing tables and network gateways. You can use both IPv4 and IPv6 for secure and easy access to resources and applications in the VPC.\nRegion is a concept that describes many extremely large clusters of AWS data centers located in a certain territory. Within a region, you can create multiple VPCs, and each VPC is distinguished by different ranges of IP address spaces. You specify the IPv4 address range by selecting a Classless Inter-Domain Routing (CIDR), such as 10.0.0.0/16. The Amazon VPC address range cannot be changed once it has been created. Amazon VPC address ranges can be as large as /16 (ie 65536 available addresses) or as small as /28 (ie 16 available addresses) and they must not overlap with any other networks to which they will be connected. connect to.\nThe Amazon VPC service was launched after the Amazon EC2 service, so at some point, AWS offered two different networking platforms, EC2-Classic and EC2-VPC. EC2-Classic is the first networking platform where all Amazon EC2 is created in a single flat network, sharing connectivity among AWS customers. As of December 2013, AWS only supports EC2-VPC with default VPC created in each Region and a default subnet with a CIDR block of 172.31.0.0/16.\nContent  Subnets Route Table Internet Gateway NAT Gateway  Now we will go through the most basic concepts of VPC in the next sections.\n"
},
{
	"uri": "/4-vpn-sitetosite/4.2-config-vpn/",
	"title": "Configure VPN connection",
	"tags": [],
	"description": "",
	"content": "In this step we will proceed to create Virtual Private Gateway , Customer Gateway and VPN Site to Site connection.\nContent:\n Create Virtual Private Gateway Create Customer Gateway Create VPN Connection Customer GW Configuration  "
},
{
	"uri": "/2-secure-feature/",
	"title": "Firewall in VPC",
	"tags": [],
	"description": "",
	"content": "Firewall in VPC In this section, we will learn the basic security features in Amazon VPC such as the Security Group firewall feature and Network Access Control Lists. A security group acts as a virtual firewall for the EC2 Instance, helping to control network traffic. An Instance in VPC can be assigned up to 5 Security groups because SG only works at the Instance layer and not at the Subnet layer.\nSecurity groups operate at the virtual machine level, not the subnet level. However, each virtual machine in a subnet can be assigned to different security groups.\n\rA network access control list (ACL) is an optional security layer for VPCs that acts as a firewall to control incoming and outgoing traffic for one or more subnets. You can set up network ACLs with the same rules as security groups, to add an extra layer of security to the VPC.\nContent  Security groups Network ACLs  "
},
{
	"uri": "/2-secure-feature/2.2-nacl/",
	"title": "Network ACLs",
	"tags": [],
	"description": "",
	"content": "Network ACLs  VPC after initialization will have a default network ACL available and can be modified. By default, it grants access to all IPv4 or IPv6 traffic that may go in or out of the VPC. Can create a custom network ACL and associate it with a subnet. By default, custom network ACLs deny all incoming and outgoing traffic, until we add an access permission rule. Each subnet in the VPC must be associated with a network ACL. If the subnet is not associated with a specific network ACL, the subnet is automatically associated with the default network ACL. A network ACL can be associated with multiple subnets. However, a subnet can only be associated with one network ACL at a time. When a new network ACL is associated with a subnet, the previous association is deleted. A network ACL contains a list of differently numbered rules. AWS evaluates rules based on their assigned sequence number, starting with the lowest numbered rule, to determine if traffic is allowed in or out of any subnets associated with the network ACLs. . The largest sequence number that can be assigned to a rule is 32766 (equivalent to the maximum number of rules for a network ACL is 32766). The Network ACL has separate entry and exit permission rules and the rule can be to allow or deny traffic. Network ACL is a Stateless service, which means that responses to traffic that are allowed in must follow the rules for outbound traffic (and vice versa).  Network ACL rules You can add or remove a rule from the default network ACL or create a new network ACL for the VPC. When adding or removing a rule from the network ACL, the changes are automatically applied to the subnets associated with it.\nComponents of a network ACL rule:\n Rule number. The starting rule is evaluated starting with the rule with the lowest sequence number. As soon as that rule matches traffic, it will immediately be applied even if it conflicts with a higher-numbered rule in the list. Type.traffic type, eg SSH. All traffic types or custom ranges can be specified. Protocol. specify the protocol with the standard protocol number. Port range. port or port range listening for traffic. For example, HTTP is 80. Source. [Inbound rule only] Origin of traffic (value is CIDR range). Destination. [Outbound rule only] Destination of traffic (value is CIDR range). Allow/Deny. specify Allow or Deny traffic.  "
},
{
	"uri": "/1-vpc-introduction/1.2-route-table/",
	"title": "Route Table",
	"tags": [],
	"description": "",
	"content": "Route Table The Route Table, also known as the routing table, provides routing instructions and is assigned to the Subnets. For example, when you create a VPC with network layer 10.10.0.0/16, with 2 subnets 10.10.1.0/24,10.10.2.0/24, each default subnet will be assigned a default route table.\nInside the route table there will be a route entry destination:10.10.0.0/16 target:local. This route entry shows that resources created in the same VPC can be connected to each other.\n"
},
{
	"uri": "/4-vpn-sitetosite/4.2-config-vpn/4.2.2-create-cgw/",
	"title": "Create Customer GW",
	"tags": [],
	"description": "",
	"content": " Go to Amazon VPC console page at https://console.aws.amazon.com/vpc/.   Drag down the right navigation bar. Click Customer Gateways. Click Create Customer Gateway.   At the Create Customer Gateway page:   Fill in information Name : Customer Gateway In the Routing section, make sure the configuration is set to static by default. In the IP Address field, enter the public IP address of the EC2 server Customer Gateway. Click Create Customer Gateway.  Click Close.  Note: according to the architectural model, the Customer Gateway will reside in the VPC on the onpremise environment. What we are currently doing is declaring to AWS that we will have a Customer Gateway with a public IP address that is the public address of the EC2 instance: Customer Gateway located in the ASG VPN VPC.\n\r"
},
{
	"uri": "/4-vpn-sitetosite/4.1-deploy-infra/4.1.2-create-ec2/",
	"title": "Create EC2 Instance",
	"tags": [],
	"description": "",
	"content": "Create EC2 as Customer Gateway  Create Security Group for Customer Gateway   Access Amazon VPC console. On the left navigation bar, select Security Group, click Create Security Group.  In the Security group name field enter VPN Public - SG   In the Description section enter Allow IPSec, SSH and Ping for servers in public subnet. Click VPC, select VPC named ASG VPN.   In Inbound rules, click Add rule.   Select Type: SSH and Source: My IP. My IP represents a public IPv4 address you are using. Click Add rule to add a new rule. Select Type: Custom ICMP v4 and Source: Anywhere. Allow ping from any IP address. Click Add rule to add a new rule. Select Type: Custom UDP , **Port:400 and Source : Anywhere. Click Add rule to add a new rule. Select Type: Custom UDP , **Port:500 and Source : Anywhere.  Drag the screen down and Click Create Security Group.   So we have created Security Group. Next we will proceed to create an EC2 server that plays the Customer Gateway role.\n  Access the Amazon EC2 console at https://console.aws.amazon.com/ec2/.\n   On the left navigation bar, select Intances, Launch Intance. Select Select to select Amazon Machine Image (AMI) Amazon Linux 2 AMI (HVM), SSD Volume Type.    Leave the General purpose t2.micro selected, then click Next: Configure Instance Details.   At Configure Instance Details page\n   Network select VPC ASG VPN. Subnet select subnet VPN Public. Auto-assign Public IP check whether Enable or not. If not Enable, you need to check the configuration to automatically allocate public IP for the subnet. Then click Next: Add Storage.   At the Add Storage page. Keep the default configuration and Click Next: Add Tags On the Add Tags page, select Add Tag   Key enter Name. Value fill in Customer Gateway. Then click Next: Configure Security Group.  At the Configure Security Group page   Assign a security group click on Select an existing security group. Name selects the security group for EC2s in the public cubnet named VPN Public - SG. Then click Review and Launch.   Check the configuration information again and Click Launch.   A prompt Choose an existing key pair or Create new key pair appears. Select Choose an existing keypair. Select Key pair name: asg-keypair. Click I acknowledge that I have access to the selected private key file (asg-keypair.pem), and that without this file, I won\u0026rsquo;t be able to log into my instance. to confirm that you have can access the Key pair you have selected. Click Launch.  Click View Instances and wait until EC2 finishes initializing.  So we have created the EC2 server according to the required architectural model. The next step we will start to initialize and configure the Site to Site VPN connection.  "
},
{
	"uri": "/3-create-vpc/3.2-internet-gateway/",
	"title": "Create IGW and Route table",
	"tags": [],
	"description": "",
	"content": "After creating the VPC and subnets, the next step is to create the Internet Gateway, and create and configure the Route table. After completing the steps below, we will have the following architecture: Create an Internet Gateway   Access Amazon VPC console.\n  On the left navigation bar, select Internet Gateways, Create Internet Gateways   Name the Internet Gateway as Internet Gateway.\n  Click Create Internet Gateway.   Click Action.\n  Click Attach to VPC.   Click on VPC ASG , VPC ID will be automatically filled in.\n  Click Attach Internet Gateway.   Create Route Table to route outbound internet through Internet Gateway.  Access Amazon VPC console. On the left navigation bar, select Route Tables, Create Route Table    Enter the Route Table name in the Name tag section: Route table - Public.\n  Select VPC named ASG , VPC id will be automatically filled in.\n  Click Create.   Click Close.\n  Select **Route table - Public **, click Action , click Edit routes.   Click Add route.\n  Fill in Destination CIDR : 0.0.0.0/0 represents the Internet.\n  In the Target section, click Internet Gateway, then select the Internet Gateway we created. The Internet Gateway ID will be automatically filled in.\n  Select Save routes   Make sure Route table - Public is selected.\n  Click on the Subnet Associations tab in the menu below.\n  Click Edit subnet associations.   Expand the Subnet ID column by dragging the pane to the right.\n  Choose the correct 2 public subnets we have created.\n  Click Save.   So we have done:\n Create Internet Gateway named Internet Gateway. Create a Route table named Route table - Public Edit route in route table Route table - Public.  Add route entry Destination: 0.0.0.0/0 Target: Internet Gateway.   Associate Route table - Public to 2 subnets Public subnet 1 and Public subnet 2.    "
},
{
	"uri": "/4-vpn-sitetosite/4.2-config-vpn/4.2.3-create-vpn-connection/",
	"title": "Create VPN Connection",
	"tags": [],
	"description": "",
	"content": " Go to Amazon VPC console page at https://console.aws.amazon.com/vpc/   Drag the navigation bar down. Click Site-to-Site VPN Connections. Click Create VPN Connection.   At the Create VPN Connection page, fill in the information:   Name tag: VPN Connection Target Gateway Type: Select Virtual Private Gateway Virtual Private Gateway: Select VPN Gateway Customer Gateway: Existing Customer Gateway ID: Select Customer Gateway Routing Options: Static Static IP Prefixes: 10.11.0.0/16. This is the IP address resolution in a simulated Onpremise environment. The other configurations keep the default.  Drag the screen to the bottom and click Create VPN Connection. Click Close after VPN Connection has been created successfully.  Configure propagation for route tables   Visit Amazon VPC console page at https://console.aws.amazon.com/vpc/ In the left menu, click Route Tables. Click on route table Route table - Public. Click the Route Propagation tab. Click Edit route propagation.  Click on Enable box. Click Save to save the Route table.    Do the same step 3 for Route table - Private. Check Propagation status is Yes as shown below.   Next we will install and configure Customer Gateway software using Open Swan.\n  "
},
{
	"uri": "/3-create-vpc/",
	"title": "Creating a VPC",
	"tags": [],
	"description": "",
	"content": "In this lab, we will build a model according to the diagram below:\nContent:\n Create VPCs and subnets  Create an Internet gateway and Route Table Create Security group for VMs located in Public \u0026amp; Private subnet Create EC2 server Test Connection Create NAT Gateway and ping out to internet from EC2 Private  "
},
{
	"uri": "/1-vpc-introduction/1.3-internetgateway/",
	"title": "Internet Gateway",
	"tags": [],
	"description": "",
	"content": "Internet Gateway   The Internet Gateway (IGW) is an Amazon VPC component that enables resources within the VPC, specifically EC2, to communicate with the Internet. IGW has strong horizontal elasticity, and high redundancy and availability. It acts as a target in the Amazon VPC\u0026rsquo;s routing table, helping traffic to be routed outside the Internet by translated EC2\u0026rsquo;s network address into the Public IP address it has been assigned.\n  More specifically, EC2 Instances inside the VPC only know the Private IP addresses assigned to it, but when there is traffic sent from EC2 out to the Internet, the IGW will translate that Private IP address into a Public IP address ( or EIP addresses, discussed later) that are assigned to EC2, and maintain a 1-1 mapping until the Public IP address is released.\n  When EC2 receives traffic from outside the Internet, the IGW translates the Target address (Public IP address) into the EC2 Instance Private IP address and forwards the traffic to the Amazon VPC.\n  "
},
{
	"uri": "/3-create-vpc/3.3-security-group/",
	"title": "Create Security Group",
	"tags": [],
	"description": "",
	"content": "In this step we will create 2 security groups that allow ping and ssh to be used for 2 EC2 servers located in public subnet and private subnet.\nCreate Security Group for servers located in Public subnet   Access Amazon VPC console.\n  On the left navigation bar, select Security Group, click Create Security Group.   In the Security group name field enter Public subnet - SG\n  In the **Description ** section enter Allow SSH and Ping for servers in public subnet.\n  Click VPC, select VPC named ASG.   In Inbound rules, click Add rule.\n  Select Type: SSH and Source: My IP. My IP represents a public IPv4 address you are using.\n  Click Add rule to add a new rule.\n  Select Type: Custom ICMP v4 and Source: Anywhere. Allow ping from any IP address.   Drag the screen down and Click Create Security Group.\n  Create Security Group for servers located in Private subnet   Access Amazon VPC console.\n  On the left navigation bar, select Security Group, click Create Security Group.   In the Security group name field enter Private subnet - SG\n  In the Description section enter Allow SSH and Ping for servers in private subnet.\n  Click VPC, select VPC named ASG.   In Inbound rules, click Add rule.\n  Select Type: SSH and leave Source: Custom as it is. Click on the search box and select Public subnet SG. This option allows all servers assigned Public subnet SG to be SSHed into servers assigned Private subnet SG.   Click Add rule to add a new rule.\n  Select Type: Custom ICMP v4 and Source: Anywhere. Allow ping from any IP address.   Drag the screen down and Click Create Security Group.\n  So we have created 2 Security Groups for servers located in public subnet and private subnet.\n  Next we will proceed to create 2 EC2 servers.\n  "
},
{
	"uri": "/4-vpn-sitetosite/4.2-config-vpn/4.2.4-config-customergw/",
	"title": "Configure Customer GW",
	"tags": [],
	"description": "",
	"content": " To download the configuration file for VPN Connection on the On-premise side. You can download the Template from AWS provided:   Visit Amazon VPC console page at https://console.aws.amazon.com/vpc/ Drag the left navigation bar down, click Site-to-Site VPN Connection. Select the created VPN Connection, then select Download Configuration.   In the Download Configuration dialog box, select the appliance that\u0026rsquo;s right for you: In this exercise, we\u0026rsquo;ll be using OpenSwan.  Vendor: Select OpenSwan Platform: Select OpenSwan Software: Select OpenSwan 2.6.38+ Click Download.     Save the image file information to the folder we use to store the key pair and tools for the lab.  Then, based on the configuration provided, you change the appropriate information and configuration for your device. Connect ssh to EC2 Customer Gateway.    Install OpenSwan  sudo su yum install openswan -y Check the configuration file /etc/ipsec.conf   Run the command vi /etc/ipsec.conf Check the configuration is as shown below.  Press the ESC key and the combination :q! to exit the vi editor.  Configuration file /etc/sysctl.conf   Run the command vi /etc/sysctl.conf Move down to the last position in the configuration file. Press the i key to proceed with editing the file. Add the following configuration at the end of the configuration file.  net.ipv4.ip_forward = 1 net.ipv4.conf.all.accept_redirects = 0 net.ipv4.conf.all.send_redirects = 0  Press the ESC key and the combination :wq! to save the configuration file.   Then to apply this configuration, run the command:  sysctl -p Next we will configure the file /etc/ipsec.d/aws.conf   Run the command vi /etc/ipsec.d/aws.conf Press the i key to edit the file. Add the following configuration to the configuration file. We will create 2 Tunnels with information taken from the VPN Connection configuration file you downloaded and saved together in the folder containing the key pair before.  conn Tunnel1 authby=secret auto=start left=%defaultroute leftid=13.212.233.95 right=52.220.15.74 type=tunnel ikelifetime=8h keylife=1h phase2alg=aes128-sha1;modp1024 ike=aes128-sha1;modp1024 keyingtries=%forever keyexchange=ike leftsubnet=10.11.0.0/16 rightsubnet=10.10.0.0/16 dpddelay=10 dpdtimeout=30 dpdaction=restart_by_peer overlapip=yes  conn Tunnel2 authby=secret auto=start left=%defaultroute leftid=13.212.233.95 right=54.255.91.142 type=tunnel ikelifetime=8h keylife=1h phase2alg=aes128-sha1;modp1024 ike=aes128-sha1;modp1024 keyingtries=%forever keyexchange=ike leftsubnet=10.11.0.0/16 rightsubnet=10.10.0.0/16 dpddelay=10 dpdtimeout=30 dpdaction=restart_by_peer overlapip=yes  Press the ESC key and the combination :wq! to save the configuration file.  Make sure you edit the IP address and network class accordingly before copying the above configuration.\nFor Amazon Linux, we will remove the auth=esp line in the original configuration file.\nSince we only have 1 public IP addres for Customer Gateway, we will need to configure overlapip=yes .\\\n\rleftid: IP Public Address on the Onprem side. (Here is the public IP of EC2 Customer Gateway in ASG VPN VPC) .\nright: IP Public Address on AWS VPN Tunnel side. .\nleftsubnet: CIDR of Local Side Network (If there are multiple network layers, you can leave it as 0.0.0.0/0). .\nrightsubnet: CIDR of Private Subnet on AWS.\n\r Check out the next step in the configuration file we downloaded.   Create and configure the file etc/ipsec.d/aws.secrets Create a new file with the following configuration to set up the authentication for the 2 Tunnels.\n   Run the command touch /etc/ipsec.d/aws.secrets to create the file. Run the command vi /etc/ipsec.d/aws.secrets Press the i key to edit the file. Add the following configuration at the end of the configuration file.  13,212.233.95 52.220.15.74: PSK \u0026#34;2ned6kIANuA8nPtYnwvQVwak_fJcmSP5\u0026#34; 13.212.233.95 54.255.91.142: PSK \u0026#34;jdkPQG140TeUacw3rnKlyavxnrNaAkZ7\u0026#34;  Press the ESC key and the combination :wq! to save the configuration file. Run the command cat /etc/ipsec.d/aws.secrets to check the configuration file content.   Restart Network service \u0026amp; IPSEC service  service network restart chkconfig ipsec on service ipsec start service ipsec status If the status tunnel is still not running properly, after checking and updating the configuration you will need to run the command to restart the service network and IPsec : .\nsudo service network restart .\nsudo service ipsec restart\n\rAfter completing the configuration. Try to ping from the Customer Gateway server-side to the EC2 Private server. If the VPN configuration is successful, you will get the following results.  "
},
{
	"uri": "/4-vpn-sitetosite/",
	"title": "Configure Site-to-Site VPN",
	"tags": [],
	"description": "",
	"content": "We can connect the On-premise data center to Amazon VPC using hardware or software VPN depending on the purpose and actual needs. To establish a Site to Site VPN connection. We will need to create and configure the Virtual Private Gateway VPG and Customer Gateway CGW.\n Virtual Private Gateway (VPG) is a control center that connects the virtual private network (VPN) installed on AWS VPC. A Customer Gateway (CGW) is a representation of a hardware or software VPN device installed at the Client end.  VPN tunnel will be established as soon as data traffic is transferred between AWS and the customer\u0026rsquo;s network. In that connection, you must specify the type of routing that will be used to ensure the safety and quality of data transmission. If the CGW on the client-side supports Border Gateway Protocol (BGP), then in the VPN connection configuration we are required to set the routing to dynamic routing. Otherwise, we must configure the connection routing as static routing. In the case of using static routing, you must enter the exact routes needed for the connection from the Client-side to the VPG set up at the AWS end. Also, routing for the VPC must be configured to propagate to allow resources to exchange data in and out of the VPN tunnel connection between AWS and the Customer\u0026rsquo;s network.\nAmazon VPC offers many types of CGWs, and each CGW is assigned to a VPG, but 1 VPG can be associated with multiple CGWs (many-to-one design). To support this model, the CGW\u0026rsquo;s IP address must be unique within a region. Amazon VPC also provides the necessary information for Network Administrators to be able to configure the CGW and establish a VPN connection to the VPG on AWS. VPN connection always includes 2 Internet Protocol Security (IPSec) tunnels to ensure high availability of the connection.\nBelow are the important features that we need to know about VPG, CGW, and VPN:\n VPG is the terminal component of VPN tunnel located on AWS. The CGW can be a hardware device or a software application located at the Client end in the VPN tunnel connection. You must initiate VPN tunnel connection from CGW to VPG. VPG supports both dynamic routing (BGP) and static routing. VPN connection always has 2 tunnels to ensure high availability for connection to VPC from the Client site.  The lab helps us learn how to set up a Site to Site VPN connection in AWS. In fact, this solution is quite popular due to the advantages of low cost and is easy to configure because AWS provides instructions for each type of device at the Customer end. Customer\u0026rsquo;s only concern was preparing the internet from on-premise data center to create a secret secure tunnel (using IPSec) connecting to AWS through the AWS VPN tunnel.\nIn the scope of the lab, assume that we have Main office ( VPC ASG ) and Branch office ( VPC ASG VPN ) located at 2 VPCs belonging to 2 different AZs to have isolation of the network. On each VPC we will create EC2 and allows external SSH from the internet, the EC2 instances can\u0026rsquo;t connect and ping each other using each EC2\u0026rsquo;s Private IP address. All we need to do is configure the VPN so that the EC2 instances can ping each other Private IP addresses using the Site-to-Site VPN.\nContent:\n Create ASG VPN VPC and subnet Configure Site to Site VPN and test connection with private IP   "
},
{
	"uri": "/1-vpc-introduction/1.4-natgateway/",
	"title": "NAT Gateway",
	"tags": [],
	"description": "",
	"content": "NAT Gateway   By default, any EC2 running inside a Private subnet will not be able to communicate with the Internet through the IGW. From there the problem arises when that EC2 needs to go outside of the Internet to apply security updates, download patches, or update application software. Understanding that need, AWS provides 2 methods that allow EC2s inside Private subnet to have access to the Internet, namely NAT Instance and NAT Gateway. For common cases, we should use NAT Gateway instead of NAT Instance. NAT Gateway ensures higher availability and bandwidth and requires less administrative effort than NAT Instance.\n  To create a NAT gateway, you must specify a subnet (public) and an Elastic IP address. Make sure the Elastic IP address is not associated with any other Instance or Network interface.\n  In case we want to migrate from a NAT instance to a NAT gateway, we can reuse the Elastic IP address of the NAT instance. But first, we need to separate the IP address from the NAT Instance.\n  Neither the NAT Gateway nor the NAT instance supports direct inbound traffic from the internet.\n\r"
},
{
	"uri": "/3-create-vpc/3.4-create-ec2/",
	"title": "Create EC2 Server",
	"tags": [],
	"description": "",
	"content": "In this step we will create 2 EC2 servers ( EC2 instances ) like the architecture below.\nCreate EC2 in Public subnet   Access the Amazon EC2 console at https://console.aws.amazon.com/ec2/.\n  On the left navigation bar, select Intances, Launch Intance.   Select Select to select Amazon Machine Image (AMI) Amazon Linux 2 AMI (HVM), SSD Volume Type.   Leave the General purpose t2.micro selected, then click Next: Configure Instance Details.   At Configure Instance Details page\n   Network select VPC ASG. Subnet select subnet Public subnet 1. Auto-assign Public IP check whether Enable or not. If not Enable, you need to check the configuration for automatically allocating public IP for the subnet in Section 3.1. Then click Next: Add Storage.   At the Add Storage page. Keep the default configuration and Click Next: Add Tags On the Add Tags page, select Add Tag   Key enter Name. Value enter EC2 Public. Then click Next: Configure Security Group.   At the Configure Security Group page   Assign a security group click on Select an existing security group. Name selects the security group for EC2s in the public cubnet named Public subnet -SG. Then click Review and Launch.   Check the configuration information again and Click Launch.   A prompt Choose an existing key pair or Create new key pair appears. Select Create a new key pair. Key pair name: asg-keypair. Click Download Key Pair. Choose the path to save the key pair file. You will need the key pair file to be able to ssh to the EC2 Public instance you are about to create. Click Save to save the key pair file. Click Launch.  Click View Instances and wait until EC2 finishes initializing.  Create EC2 in Private subnet  Access the Amazon EC2 console at https://console.aws.amazon.com/ec2/. On the left navigation bar, select Intances, Launch Intance. Select Select to select Amazon Machine Image (AMI) Amazon Linux 2 AMI (HVM), SSD Volume Type.  Leave the General purpose t2.micro selected, then click Next: Configure Instance Details.  At Configure Instance Details page   Network choose VPC ASG. Subnet select subnet Private subnet 2. Auto-assign Public IP check if it is Disable or not. If not Disable, you need to check the configuration of automatically allocating public IP for the subnet in Section 3.1. Then click Next: Add Storage.   At the Add Storage page. Keep the default configuration and Click Next: Add Tags On the Add Tags page, select Add Tag   Key enter Name. Value enter EC2 Private. Then click Next: Configure Security Group.   At the Configure Security Group page   Assign a security group click on Select an existing security group. Name selects the security group for EC2s in the public cubnet named Private subnet -SG. Then click Review and Launch.   Check the configuration information again and Click Launch.   A prompt Choose an existing key pair or Create new key pair appears. Select Choose an existing keypair. Select Key pair name: asg-keypair. Click I acknowledge that I have access to the selected private key file (asg-keypair.pem), and that without this file, I won\u0026rsquo;t be able to log into my instance. to confirm that you have can access the Key pair you have selected. Click Launch.  Click View Instances and wait until EC2 finishes initializing.  So we have created 2 EC2 servers according to the architecture model below. The next step we will try to access these 2 servers.  "
},
{
	"uri": "/5-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "We will proceed to delete the resources in the following order\n Terminate the EC2 Instance.   Access the Amazon EC2 console at https://console.aws.amazon.com/ec2/. On the left navigation bar, select Intances Select all EC2 Instances related to the lab. Click Actions. Click Manage Instance State. Select Terminate. Click Change State   Remove NAT Gateway and Elastic IP Address. AWS charges for wasted EIPs, so you need to double-check to avoid unintended charges.   Visit Amazon VPC console page at https://console.aws.amazon.com/vpc/ On the left navigation bar, click NAT Gateway. Select NAT Gateway. Click Action. Click Delete NAT Gateway. Type delete. Click Delete to confirm deletion of NAT Gateway.   Continue to delete Elastic IP Address.   Visit Amazon VPC console page at https://console.aws.amazon.com/vpc/ On the left navigation bar, click Elastic IP. Select the Elastic IP Address we created. Click Action. Click Release Elastic IP Address.  Click Release.  Continue to do the same and delete in the following order:   VPN Site to Site connection. Virtual Private Gateway. Customer Gateway. VPC ASG VPN.  VPC ASG.  "
},
{
	"uri": "/3-create-vpc/3.5-test-connect/",
	"title": "Test connection",
	"tags": [],
	"description": "",
	"content": "In this step we will connect ssh to 2 EC2 servers ( EC2 instances ) we created in step 3.4. Then perform a ping test to check internet connectivity.\nConnect to EC2 Public server and test Internet access.   Access the Amazon EC2 console at https://console.aws.amazon.com/ec2/.\n  Check and get public IP information of EC2 Public server.   Download putty and puttygen to connect ssh to EC2 Public.\n  \r\rPutty and Puttygen\r\r\rpscp.exe\r\r(717 ko)\r\r\rputty.exe\r\r(1244 ko)\r\r\rputtygen.exe\r\r(784 ko)\r\r\r\rFirst open puttygen you downloaded to convert asg-keypair.pem to asg-keypair.ppk.   Click Load. Move the directory to the path you downloaded asg-keypair.pem. Choose to display All Files. Select asg-keypair.pem. Click Open.  Click Ok. Click Save Private Key. Click Yes. Enter the name asg-keypair. Click Save.   Open the putty tool you downloaded, enter the public IP information in the Host name field.   Enter EC Public in the Saved sessions field. Click Save.   Next we will use key pair to be able to connect to EC2 public.   Click SSH. Click Auth. Click Browse. Change the directory path to the directory containing the file asg-keypair.ppk. Convert file format to *.ppk. Select the file asg-keypair.ppk. Click Open. Click Open to make connection to EC2 Public.   Enter ec2-user. ec2-user is the default user of the Amazon Linux AMI.   Type the command ping amazon.com to check the connection to the internet of EC2 Public.  ping amazon.com Connect to EC2 Private server and check internet connection.  Access the Amazon EC2 console. Check and get private IP information of EC2 Private server.   Perform a ping command \u0026lt;EC2 Private\u0026rsquo;s private IP address\u0026gt; to test the connection from the EC2 Public server to the EC2 Private server.   EC2 Private will not have a public IP address because we are not assigning this server a public IP. To be able to ssh into EC2 Private, we will make ssh connection from EC2 Public through EC2\u0026rsquo;s private IP address Private   Download the pscp tool to the same folder containing the asg-keypair.ppk file to copy the *asg-keypair.pem file from our computer to EC2 Public.  \r\rpscp tool\r\r\rpscp.exe\r\r(717 ko)\r\r\r\r Launch Command Prompt.Go to the directory you just downloaded pscsp. Run the command below to upload the asg-keypair.pem file to the /home/ec2-user/ directory of the EC2 Public server. You will need to replace the EC2 Public\u0026rsquo;s public IP address parameter before running the command.  pscp -i asg-keypair.ppk asg-keypair.pem ec2-user@\u0026lt;EC2 PUBLIC public IP address\u0026gt;:/home/ec2-user/ Make sure you copy the asg-keypair.pem file to the EC2 Public server.\n\r Update the permissions for the asg-keypair.pem file by running the chmod 400 asg-keypair.pem command. AWS requires a key pair file that needs to be restricted before it can be used to connect to the EC2 server.  chmod 400 asg-keypair.pem ssh to the EC2 Private server and do a ping test to amazon.com.  ssh -i asg-keypair.pem ec2-user@\u0026lt;EC2 Private server\u0026#39;s private IP address\u0026gt;\rping amazon.com 6. As you can see, we cannot connect to the internet from EC2 Private. In the next step we will create a NAT Gateway to allow the EC2 Private server to connect to the internet in the outbound direction. Keep the connection to EC2 Private so that we can check the connection to the internet after finishing creating and configuring the NAT Gateway.\n"
},
{
	"uri": "/3-create-vpc/3.6-nat-gateway/",
	"title": "NAT Gateway",
	"tags": [],
	"description": "",
	"content": "In this step we will create a NAT Gateway to allow the EC2 Private server to go out to the internet according to the below architecture.\nGenerate an Elastic IP address  Access the Amazon VPC console. On the left navigation bar, select Elastic IPs. Click Allocate Elastic IP address .  Click Allocate. We have successfully created a Public IP Address: 54.251.117.148   Create a NAT Gateway  Access the Amazon VPC console. On the left navigation bar, select NAT Gateways. Select Create NAT Gateway.  At the Create NAT Gateway page:   In the Name field, enter NAT Gateway. In the subnet section, select Public subnet 2. In the Elastic IP Allocation ID section, select the Elastic IP address we just created. Click Create NAT Gateway   Create Route table - Private and assign to private subnets.  Access the Amazon VPC console. On the left navigation bar, select Route Tables. Click Create route table  On the Create route table page:   In the Name tag section, fill in Route table - Private. In the VPC section, select VPC ASG. Click Create  After creating the route table successfully, click Close.    Select Route table - Private.   Click the Subnet Associations tab. Click Edit subnet associations.  Select 2 private subnets and click Save.  Select Route table - Private.    Click the Route tab.\n  Click Edit route.   Select Add Route\n  Destination: 0.0.0.0/0\n  Target: NAT Gateway\n  Select Save routes   Click Close after successfully adding route entry.\n   Test ping amazon.com successfully from EC2 Private.   Congratulations, we have completed the lab model as below. In the next section, we will initialize and configure the Site to Site VPN connection to connect the onpremise environment to the AWS Cloud.   "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]