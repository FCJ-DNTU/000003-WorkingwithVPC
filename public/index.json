[
{
	"uri": "/",
	"title": "Amazon VPC Setup",
	"tags": [],
	"description": "",
	"content": "Table of Contents  Create VPC VPC Security Basic  "
},
{
	"uri": "/1-create-vpc/",
	"title": "Create VPC",
	"tags": [],
	"description": "",
	"content": "Table of Contents  VPC Introduction VPC Subnet Internet Gateway NAT Gateway Build a Simple Lab  Section 1.1, 1.2, 1.3, 1.4 introduce the basic concept. You can read sections 1.2, 1.3, 1.4 and do the hand-on lab in section 1.5\n"
},
{
	"uri": "/2-vpc-security-basic/3-setup-site-to-site-vpn/1-deploy-infra/",
	"title": "Deploy Infrastructure",
	"tags": [],
	"description": "",
	"content": "Contents:\n 1. Configure Network 2. Launch EC2 instance  1. Configure Network Firstly, we will create an Elastic IP prepare for NAT Gateway:\n Browse to VPC Console, select Elastic IPs and click Allocate Elastic IP address. Click Allocate to allocate new Elastic IP.  Now, go to VPC Dashboard to create a new VPC:\n Click on Launch VPC Wizard  In Step 1: Select a VPC Configuration page, select VPC with Public and Private Subnets Click Select In Step 2: VPC with Public and Private Subnets page, input information:  IPv4 CIDR block: 10.10.0.0/16 VPC name: LabVPC Public subnet\u0026rsquo;s IPv4 CIDR: 10.10.0.0/24 Public subnet name: Public subnet Private subnet\u0026rsquo;s IPv4 CIDR: 10.10.3.0/24 Private subnet name: Private subnet Elastic IP Allocation ID: Select the EIP previously created. Let others setting as default.    Click Create VPC to create a new VPC.  2. Launch EC2 instance Create Security Group for EC2\n Go to EC2 Console, click Create security group. In Create security group page, input the Security Group information:  Security group name: Private-EC2-SG Description: Private-EC2-SG VPC: Select previous created VPC In Inbound rules section, click Add rule  Type: SSH; Source: My IP Type: All Traffic; Source: Custom, 10.28.0.0/16     Click Create security group.  Launch EC2 in LabVPC\n Go to EC2 Console, click Instances then click Launch instances.  Follow the step and choose below configuration for you EC2 instance.  AMI: Amazon Linux 2 AMI (HVM), SSD Volume Type Instance type: t2.micro Network: LabVPC Subnet: Private subnet Auto-assign Public IP: Disable Network interfaces \u0026gt; Primary IP: 10.10.3.100 Security group: Private-EC2-SG Leave other settings as default.   Click Review and Launch Review EC2 instance information then click Launch.  In Select an existing key pair or create a new key pair dialog, create a new keypair:  Select Create a new key pair Key pair name: ec2-keypair    Click Launch Instances  "
},
{
	"uri": "/2-vpc-security-basic/2-configure-vpc-flow-logs/1-publish-cw-logs/",
	"title": "Publish to CW Logs",
	"tags": [],
	"description": "",
	"content": "Contents:\n Create an IAM role for flow logs Creating a flow log that publishes to CloudWatch Logs  Create an IAM role for flow logs  Open the IAM console at https://console.aws.amazon.com/iam/ In the navigation pane, choose Roles, Create role. Choose EC2 as the service to use this role. For Use case, choose EC2. Choose Next: Permissions. On the Attach permissions policies page, choose Next: Tags and optionally add tags. Choose Next: Review. Enter a name for your role (for example, Flow-Logs-Role) and optionally provide a description. Choose Create role. Select the name of your role. For Permissions, choose Add inline policy, JSON. Copy the below policy and paste it in the window. Choose Review policy.  { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Action\u0026#34;: [ \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34;, \u0026#34;logs:DescribeLogGroups\u0026#34;, \u0026#34;logs:DescribeLogStreams\u0026#34; ], \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] }  Enter a name for your policy, and choose Create policy. Select the name of your role. For Trust relationships, choose Edit trust relationship. In the existing policy document, change the service from ec2.amazonaws.com to vpc-flow-logs.amazonaws.com. Choose Update Trust Policy. On the Summary page, note the ARN for your role. You need this ARN when you create your flow log.  Creating a flow log that publishes to CloudWatch Logs  Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ In the navigation pane, choose Network Interfaces or Your VPCs or Subnets. Select one or more network interfaces and choose Actions, Create flow log. For Filter, specify the type of IP traffic data to log. Choose All to log accepted and rejected traffic, Rejected to record only rejected traffic, or Accepted to record only accepted traffic. For Maximum aggregation interval, choose the maximum period of time during which a flow is captured and aggregated into one flow log record. For Destination, choose Send to CloudWatch Logs. For Destination log group, enter the name of a log group in CloudWatch Logs to which the flow logs are to be published. If you specify the name of a log group that does not exist, AWS will create the log group for you. For IAM role, specify the name of the role that has permissions to publish logs to CloudWatch Logs. For Format, specify the format for the flow log record.  To use the default flow log record format, choose AWS default format. To create a custom format, choose Custom format. For Log format, choose the fields to include in the flow log record.   (Optional) Choose Add Tag to apply tags to the flow log. Choose Create  "
},
{
	"uri": "/2-vpc-security-basic/1-configure-nacl-and-sg/1-sg/",
	"title": "Security Group",
	"tags": [],
	"description": "",
	"content": "Contents:\n Security group basics Security group rules Create a Security Group Adding a rules  Security group basics There are some basic characteristics of Security groups for your VPC:\n You can specify allow rules, but not deny rules. You can specify separate rules for inbound and outbound traffic. When you create a security group, it has no inbound rules. Therefore, no inbound traffic originating from another host to your instance is allowed until you add inbound rules to the security group. By default, a security group includes an outbound rule that allows all outbound traffic. You can remove the rule and add outbound rules that allow specific outbound traffic only. If your security group has no outbound rules, no outbound traffic originating from your instance is allowed. Security groups are stateful — if you send a request from your instance, the response traffic for that request is allowed to flow in regardless of inbound security group rules. Responses to allowed inbound traffic are allowed to flow out, regardless of outbound rules. Instances associated with a security group can\u0026rsquo;t talk to each other unless you add rules allowing the traffic (exception: the default security group has these rules by default). Security groups are associated with network interfaces. After you launch an instance, you can change the security groups that are associated with the instance, which changes the security groups associated with the primary network interface (eth0).  Security group rules A rule applies either to inbound traffic (ingress) or outbound traffic (egress. You can grant access to a specific CIDR range, or to another security group in your VPC or in a peer VPC (requires a VPC peering connection).\nThere are few basic parts of a security group rule in a VPC:\n (Inbound rules only) The source of the traffic and the destination port or port range. The source can be another security group, an IPv4 or IPv6 CIDR block, or a single IPv4 or IPv6 address. (Outbound rules only) The destination for the traffic and the destination port or port range. The destination can be another security group, an IPv4 or IPv6 CIDR block, a single IPv4 or IPv6 address, or a prefix list ID (a service is identified by a prefix list—the name and ID of a service for a Region). Any protocol that has a standard protocol number. If you specify ICMP as the protocol, you can specify any or all of the ICMP types and codes.  Create a Security Group  Open the Amazon VPC console at https://console.aws.amazon.com/vpc/ In the navigation pane, choose Security Groups. Choose Create Security Group. Enter a name for the security group (for example, my-security-group) and provide a description. Select the ID of your VPC from the VPC menu and choose Yes, Create.  Adding a rules  Open the Amazon VPC console at https://console.aws.amazon.com/vpc/ In the navigation pane, choose Security Groups. Select the security group to update. Choose Actions, Edit inbound rules or Actions, Edit outbound rules. For Type, select the traffic type, and then fill in the required information. You can also allow communication between all instances that are associated with this security group. Create an inbound rule with the following options:  Type: All Traffic Source: Enter the ID of the security group.   Choose Save rules.  "
},
{
	"uri": "/1-create-vpc/1-vpc-introduction/",
	"title": "VPC Introduction",
	"tags": [],
	"description": "",
	"content": "The Amazon Virtual Private Cloud (Amazon VPC) is a custom-defined virtual network within the AWS Cloud. You can provision your own logically isolated section of AWS, similar to designing and implementing a separate independent network that would operate in an onpremises data center.\nWithin a region, you can create multiple Amazon VPCs, and each Amazon VPC is logically isolated even if it shares its IP address space. When you create an Amazon VPC, you must specify the IPv4 address range by choosing a Classless Inter-Domain Routing (CIDR) block, such as 10.0.0.0/16. The address range of the Amazon VPC cannot be changed after the Amazon VPC is created. An Amazon VPC address range may be as large as /16 (65,536 available addresses) or as small as /28 (16 available addresses) and should not overlap any other network with which they are to be connected.\nThe Amazon VPC service was released after the Amazon EC2 service and because of this, there are two different networking platforms available within AWS: EC2-Classic and EC2-VPC. Amazon EC2 originally launched with a single, flat network shared with other AWS customers called EC2-Classic. As such, AWS accounts created prior to the arrival of the Amazon VPC service can launch instances into the EC2-Classic network and EC2-VPC. AWS accounts created after December 2013 only support launching instances using EC2-VPC. AWS accounts that support EC2-VPC will have a default VPC created in each region with a default subnet created in each Availability Zone. The assigned CIDR block of the VPC will be 172.31.0.0/16.\nAn Amazon VPC consists of the following components:\n Subnets Route tables Dynamic Host Configuration Protocol (DHCP) option sets Security groups Network Access Control Lists (ACLs)  Optional components:\n Internet Gateways (IGWs) Elastic IP (EIP) addresses Elastic Network Interfaces (ENIs) Endpoints Peering Network Address Translation (NATs) instances and NAT gatewaysVirtual Private Gateway (VPG), Customer Gateways (CGWs), and Virtual Private Networks (VPNs)  Contents:\n Create a VPC using the console  Create a VPC using the console  Open the Amazon VPC console at https://console.aws.amazon.com/vpc/ In the navigation pane, choose Your VPCs, Create VPC. Specify the following VPC details as necessary and choose Create.  Name tag: Optionally provide a name for your VPC. Doing so creates a tag with a key of Name and the value that you specify. IPv4 CIDR block: Specify an IPv4 CIDR block for the VPC. We recommend that you specify a CIDR block from the private (non-publicly routable) IP address ranges as specified in RFC 1918; for example, 10.0.0.0/16, or 192.168.0.0/16. IPv6 CIDR block: Optionally associate an IPv6 CIDR block with your VPC by choosing one of the following options:  Amazon-provided IPv6 CIDR block: Requests an IPv6 CIDR block from Amazon\u0026rsquo;s pool of IPv6 addresses. IPv6 CIDR owned by me: (BYOIP) Allocates an IPv6 CIDR block from your IPv6 address pool. For Pool, choose the IPv6 address pool from which to allocate the IPv6 CIDR block.   Tenancy: Select a tenancy option. Dedicated tenancy ensures that your instances run on single-tenant hardware.    "
},
{
	"uri": "/2-vpc-security-basic/",
	"title": "VPC Security Basic",
	"tags": [],
	"description": "",
	"content": "Table of Contents  NACL \u0026amp; SG Configure VPC Flow Logs Setup Site to Site VPN  "
},
{
	"uri": "/2-vpc-security-basic/1-configure-nacl-and-sg/",
	"title": "Configure NACL &amp; SG",
	"tags": [],
	"description": "",
	"content": "A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in a VPC, you can assign up to 5 security groups to the instance.\nSecurity groups act at the Instance level, not the Subnet level. Therefore, each instance in a subnet in your VPC can be assigned to a different set of security groups.\n\rA network access control list (ACL) is an optional layer of security for your VPC that acts as a firewall for controlling traffic in and out of one or more subnets. You might set up network ACLs with rules similar to your security groups in order to add an additional layer of security to your VPC.\nContents:\n Security groups for your VPC Network ACLs for your VPC  "
},
{
	"uri": "/2-vpc-security-basic/2-configure-vpc-flow-logs/",
	"title": "Configure VPC Flow Logs",
	"tags": [],
	"description": "",
	"content": "You can create flow logs for your VPCs, subnets, or network interfaces. Flow logs can publish data to CloudWatch Logs or Amazon S3.\nContents:\n 1. Publishing flow logs to CloudWatch Logs 2. Publishing flow logs to Amazon S3  1. Publishing flow logs to CloudWatch Logs When publishing to CloudWatch Logs, flow log data is published to a log group, and each network interface has a unique log stream in the log group. Log streams contain flow log records. You can create multiple flow logs that publish data to the same log group. If the same network interface is present in one or more flow logs in the same log group, it has one combined log stream. If you\u0026rsquo;ve specified that one flow log should capture rejected traffic, and the other flow log should capture accepted traffic, then the combined log stream captures all traffic.\n Publishing flow logs to CloudWatch Logs\n 2. Publishing flow logs to Amazon S3 When publishing to Amazon S3, flow log data is published to an existing Amazon S3 bucket that you specify. Flow log records for all of the monitored network interfaces are published to a series of log file objects that are stored in the bucket. If the flow log captures data for a VPC, the flow log publishes flow log records for all of the network interfaces in the selected VPC.\n Publishing flow logs to Amazon S3\n "
},
{
	"uri": "/2-vpc-security-basic/1-configure-nacl-and-sg/2-nacl/",
	"title": "Network ACLs",
	"tags": [],
	"description": "",
	"content": "Contents:\n Network ACL basics Network ACL rules Creating a network ACL Add rules to a network ACL  Network ACL basics There are some basic things about network ACLs:\n Your VPC automatically comes with a modifiable default network ACL. By default, it allows all inbound and outbound IPv4 traffic and, if applicable, IPv6 traffic. You can create a custom network ACL and associate it with a subnet. By default, each custom network ACL denies all inbound and outbound traffic until you add rules. Each subnet in your VPC must be associated with a network ACL. If you don\u0026rsquo;t explicitly associate a subnet with a network ACL, the subnet is automatically associated with the default network ACL. You can associate a network ACL with multiple subnets. However, a subnet can be associated with only one network ACL at a time. When you associate a network ACL with a subnet, the previous association is removed. A network ACL contains a numbered list of rules. AWS evaluate the rules in order, starting with the lowest numbered rule, to determine whether traffic is allowed in or out of any subnet associated with the network ACL. The highest number that you can use for a rule is 32766. A network ACL has separate inbound and outbound rules, and each rule can either allow or deny traffic. Network ACLs are stateless, which means that responses to allowed inbound traffic are subject to the rules for outbound traffic (and vice versa).  Network ACL rules You can add or remove rules from the default network ACL, or create additional network ACLs for your VPC. When you add or remove rules from a network ACL, the changes are automatically applied to the subnets that it\u0026rsquo;s associated with.\nThere are some parts of a network ACL rule:\n Rule number. Rules are evaluated starting with the lowest numbered rule. As soon as a rule matches traffic, it\u0026rsquo;s applied regardless of any higher-numbered rule that might contradict it. Type. The type of traffic; for example, SSH. You can also specify all traffic or a custom range. Protocol. You can specify any protocol that has a standard protocol number. Port range. The listening port or port range for the traffic. For example, 80 for HTTP traffic. Source. [Inbound rules only] The source of the traffic (CIDR range). Destination. [Outbound rules only] The destination for the traffic (CIDR range). Allow/Deny. Whether to allow or deny the specified traffic.  Creating a network ACL  Open the Amazon VPC console at https://console.aws.amazon.com/vpc/ In the navigation pane, choose Network ACLs. Choose Create Network ACL. In the Create Network ACL dialog box,  Name your Network ACL Select the ID of your VPC from the VPC list.   Then choose Yes, Create.  Add rules to a network ACL  Open the Amazon VPC console at https://console.aws.amazon.com/vpc/ In the navigation pane, choose Network ACLs. In the details pane, choose either the Inbound Rules or Outbound Rules tab, depending on the type of rule that you need to add, and then choose Edit. In Rule #, enter a rule number. The rule number must not already be in use in the network ACL. AWS process the rules in order, starting with the lowest number. Select a rule from the Type list. In the Source or Destination field, enter the CIDR range that the rule applies to. From the Allow/Deny list, select ALLOW to allow the specified traffic or DENY to deny the specified traffic. Choose Save.  "
},
{
	"uri": "/2-vpc-security-basic/2-configure-vpc-flow-logs/2-publish-s3/",
	"title": "Publish to S3",
	"tags": [],
	"description": "",
	"content": "Contents:\n IAM policy for IAM principals Amazon S3 bucket permissions Creating a flow log that publishes to Amazon S3  IAM policy for IAM principals An IAM principal in your account, such as an IAM user, must have sufficient permissions to publish flow logs to the Amazon S3 bucket. This includes permissions to work with specific logs: actions to create and publish the flow logs. The IAM policy must include the following permissions.\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;logs:CreateLogDelivery\u0026#34;, \u0026#34;logs:DeleteLogDelivery\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Amazon S3 bucket permissions By default, Amazon S3 buckets and the objects they contain are private. Only the bucket owner can access the bucket and the objects stored in it. However, the bucket owner can grant access to other resources and users by writing an access policy.\nIf the user creating the flow log owns the bucket, AWS automatically attach the following policy to the bucket to give the flow log permission to publish logs to it.\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AWSLogDeliveryWrite\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: {\u0026#34;Service\u0026#34;: \u0026#34;delivery.logs.amazonaws.com\u0026#34;}, \u0026#34;Action\u0026#34;: \u0026#34;s3:PutObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::bucket_name/optional_folder/AWSLogs/account_id/*\u0026#34;, \u0026#34;Condition\u0026#34;: {\u0026#34;StringEquals\u0026#34;: {\u0026#34;s3:x-amz-acl\u0026#34;: \u0026#34;bucket-owner-full-control\u0026#34;}} }, { \u0026#34;Sid\u0026#34;: \u0026#34;AWSLogDeliveryAclCheck\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: {\u0026#34;Service\u0026#34;: \u0026#34;delivery.logs.amazonaws.com\u0026#34;}, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetBucketAcl\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::bucket_name\u0026#34; } ] } Creating a flow log that publishes to Amazon S3  Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ In the navigation pane, choose Network Interfaces or Your VPCs or Subnets. Select one or more network interfaces and choose Actions, Create flow log. For Filter, specify the type of IP traffic data to log. Choose All to log accepted and rejected traffic, Rejected to record only rejected traffic, or Accepted to record only accepted traffic. For Maximum aggregation interval, choose the maximum period of time during which a flow is captured and aggregated into one flow log record. For Destination, choose Send to an Amazon S3 bucket. For S3 bucket ARN, specify the Amazon Resource Name (ARN) of an existing Amazon S3 bucket. You can include a subfolder in the bucket ARN. The bucket cannot use AWSLogs as a subfolder name, as this is a reserved term. For Format, specify the format for the flow log record.  To use the default flow log record format, choose AWS default format. To create a custom format, choose Custom format. For Log format, choose the fields to include in the flow log record.   (Optional) Choose Add Tag to apply tags to the flow log. Choose Create  "
},
{
	"uri": "/2-vpc-security-basic/3-setup-site-to-site-vpn/2-config-vpn/",
	"title": "Setup Site to Site VPN",
	"tags": [],
	"description": "",
	"content": "Contents:\n 1. Configure Site to Site VPN 2. Configure Site-to-Site VPN cho Customer Gateway (OpenSwan)  1. Configure Site to Site VPN Create Virtual Private Gateway\n Open the Amazon VPC console at https://console.aws.amazon.com/vpc/, click Virtual Private Gateway  Click Create VPG  Name tag: VPNGateway    In Virtual Private Gateway list, select created VPNGateway. Click Actions \u0026gt; Attach to VPC. Select previous created VPC. (LabVPC)  Create \u0026amp; configure Customer Gateway\n Go to Amazon VPC console at https://console.aws.amazon.com/vpc/, navigate to Customer Gateway.  Click Create Customer Gateway and create a new Customer Gateway with below information:  Name: CustomerGateway Routing: Static IP Address: Public IP of your On-premise Gateway.   Click Create Customer Gateway.  Create \u0026amp; configure Site-to-Site VPN Connection on AWS\n Go to Amazon VPC console at https://console.aws.amazon.com/vpc/, navigate to Site-to-Site VPN Connections. Click Create VPN Connection and create a new connection with below information:  Name tag: VPNConnection Target Gateway Type: Select Virtual Private Gateway Virtual Private Gateway: Select VPNGateway Customer Gateway: Existing Customer Gateway ID:\tSelect CustomerGateway Routing Options: Static Static IP Prefixes: 10.28.0.0/16 Keep other settings as default.   Click Create VPN Connection.  Config Route Table\n Go to Amazon VPC console at https://console.aws.amazon.com/vpc/, navigate to Route Tables. Select Route Table in LabVPC. Select tab Route Propagation Select Edit route propagation Tick on Propagate Click Save to save Route Table.  2. Configure Site-to-Site VPN cho Customer Gateway (OpenSwan) To download the configuration for VPN Connection on On-premise site. You can download the template provide from AWS:\n Go to Amazon VPC console at https://console.aws.amazon.com/vpc/, navigate to Site-to-Site VPN Connection. Select the created VPN Connection in the list, then click Download Configuration. In Download Configuration dialog, select your suitable appliance. In this lab, we use OpenSwan:  Vendor:\tSelect OpenSwan Platform:\tSelect OpenSwan Software:\tSelect OpenSwan 2.6.38+    Then you can base on this template to change some configuration that suitable for you and apply it to your Appliance.\n Install OpenSwan  sudo su yum install openswan -y  Configure /etc/ipsec.conf Remove the # from the configuration line.  include /etc/ipsec.d/*.conf  Configure /etc/sysctl.conf Add below configuration to the file.  net.ipv4.ip_forward = 1 net.ipv4.conf.all.accept_redirects = 0 net.ipv4.conf.all.send_redirects = 0 To apply the configuration, run below command:\nsysctl -p  Configure /etc/ipsec.d/aws-vpn.conf Add the connfiguration to config file. We will define 2 Tunnel with the information from downloaded configuration.  conn Tunnel1 authby=secret auto=start left=%defaultroute leftid=54.249.66.228 right=13.114.170.224 type=tunnel ikelifetime=8h keylife=1h phase2alg=aes128-sha1;modp1024 ike=aes128-sha1;modp1024 auth=esp keyingtries=%forever keyexchange=ike leftsubnet=10.28.0.0/16 rightsubnet=10.10.0.0/16 dpddelay=10 dpdtimeout=30 dpdaction=restart_by_peer conn Tunnel2 authby=secret auto=start left=%defaultroute leftid=54.249.66.228 right=52.198.189.177 type=tunnel ikelifetime=8h keylife=1h phase2alg=aes128-sha1;modp1024 ike=aes128-sha1;modp1024 auth=esp keyingtries=%forever keyexchange=ike leftsubnet=10.28.0.0/16 rightsubnet=10.10.0.0/16 dpddelay=10 dpdtimeout=30 dpdaction=restart_by_peer Note:\nleftid: IP Public Address of Onprem System. right: IP Public Address of AWS VPN Tunnel. leftsubnet: CIDR of Local Network behind OpenSwan. rightsubnet: CIDR of AWS Subnets.  Configure /etc/ipsec.d/aws-vpn.secrets Create the new file and add the configuration for authentication of 2 Tunnels.  54.249.66.228 13.114.170.224: PSK \u0026#34;ZQbWr7AXk1Wy4hv1Y3KcO4orck.DiQz0\u0026#34; 54.249.66.228 52.198.189.177: PSK \u0026#34;8OrmB8M6Jspp6v1yv0ekd89oFM3dNAyC\u0026#34;  Restart Network service \u0026amp; IPSEC service  service network restart chkconfig ipsec on service ipsec start service ipsec status "
},
{
	"uri": "/1-create-vpc/2-create-vpc-subnet/",
	"title": "VPC Subnet",
	"tags": [],
	"description": "",
	"content": "A subnet is a segment of an Amazon VPC’s IP address range where you can launch Amazon EC2 instances, Amazon Relational Database Service (Amazon RDS) databases, and other AWS resources. CIDR blocks define subnets (for example, 10.0.1.0/24 and 192.168.0.0/24). The smallest subnet that you can create is a /28 (16 IP addresses). AWS reserves the first four IP addresses and the last IP address of every subnet for internal networking purposes. For example, a subnet defined as a /28 has 16 available IP addresses; subtract the 5 IPs needed by AWS to yield 11 IP addresses for your use within the subnet.\nAfter creating an Amazon VPC, you can add one or more subnets in each Availability Zone. Subnets reside within one Availability Zone and cannot span zones, so remember that one subnet equals one Availability Zone. You can have multiple subnets in one Availability Zone.\nSubnets can be classified as Public, Private, or VPN-only.\n A Public subnet is one in which the associated route table (discussed later) directs the subnet’s traffic to the Amazon VPC’s IGW (also discussed later). A Private subnet is one in which the associated route table does not direct the subnet’s traffic to the Amazon VPC’s IGW. A VPN-only subnet is one in which the associated route table directs the subnet’s traffic to the Amazon VPC’s VPG (discussed later) and does not have a route to the IGW.  Regardless of the type of subnet, the internal IP address range of the subnet is always private (that is, non-routable on the Internet). Default Amazon VPCs contain one public subnet in every Availability Zone within the region, with a netmask of /20.\n"
},
{
	"uri": "/1-create-vpc/3-create-internet-gw/",
	"title": "Internet Gateway",
	"tags": [],
	"description": "",
	"content": "An Internet Gateway (IGW) is a horizontally scaled, redundant, and highly available Amazon VPC component that allows communication between instances in your Amazon VPC and the Internet. An IGW provides a target in your Amazon VPC route tables for Internet-routable traffic, and it performs network address translation for instances that have been assigned public IP addresses.\nAmazon EC2 instances within an Amazon VPC are only aware of their private IP addresses. When traffic is sent from the instance to the Internet, the IGW translates the reply address to the instance’s public IP address (or EIP address, covered later) and maintains the one-to-one map of the instance private IP address and public IP address. When an instance receives traffic from the Internet, the IGW translates the destination address (public IP address) to the instance’s private IP address and forwards the traffic to the Amazon VPC.\n"
},
{
	"uri": "/2-vpc-security-basic/3-setup-site-to-site-vpn/",
	"title": "Setup Site to Site VPN",
	"tags": [],
	"description": "",
	"content": "You can connect an existing data center to Amazon VPC using either hardware or software VPN connections, which will make Amazon VPC an extension of the data center. Amazon VPC offers two ways to connect a corporate network to a VPC: VPG and CGW.\n A Virtual Private Gateway (VPG) is the virtual private network (VPN) concentrator on the AWS side of the VPN connection between the two networks. A Customer Gateway (CGW) represents a physical device or a software application on the customer’s side of the VPN connection.  The VPN tunnel is established after traffic is generated from the customer’s side of the VPN connection.\nYou must specify the type of routing that you plan to use when you create a VPN connection. If the CGW supports Border Gateway Protocol (BGP), then configure the VPN connection for dynamic routing. Otherwise, configure the connections for static routing. If you will be using static routing, you must enter the routes for your network that should be communicated to the VPG. Routes will be propagated to the Amazon VPC to allow your resources to route network traffic back to the corporate network through the VGW and across the VPN tunnel.\nAmazon VPC also supports multiple CGWs, each having a VPN connection to a single VPG (many-to-one design). In order to support this topology, the CGW IP addresses must be unique within the region. Amazon VPC will provide the information needed by the network administrator to configure the CGW and establish the VPN connection with the VPG. The VPN connection consists of two Internet Protocol Security (IPSec) tunnels for higher availability to the Amazon VPC.\nFollowing are the important points to understand about VPG, CGW, and VPN:\n The VPG is the AWS end of the VPN tunnel. The CGW is a hardware or software application on the customer’s side of the VPN tunnel. You must initiate the VPN tunnel from the CGW to the VPG. VPGs support both dynamic routing with BGP and static routing. The VPN connection consists of two tunnels for higher availability to the VPC.  Let’s build a lab together then we have a better understanding about VPN Site-to-site.\nIn this lab, assume that we have Main office and Branch office lies on 2 VPCs belonging to 2 different AZs to make network difference from 2 sites. On each VPC, we create 2 EC2 to allow SSH from outside, but not able to connect and ping each other using the Private IP address of each EC2. What we need to do is configure the VPN so that Private IP addresses can ping each other using Site-to-Site VPN.\nContents:\n 1. Deploy Infrastructure 2. Configure Site to Site VPN 3. Testing  "
},
{
	"uri": "/2-vpc-security-basic/3-setup-site-to-site-vpn/3-testing/",
	"title": "Testing",
	"tags": [],
	"description": "",
	"content": "Contents:\n Test ping from Private EC2 to Private Server Onprem  Test ping from Private EC2 to Private Server Onprem Now, try to ping from the Private EC2 on AWS to Private Server on-premise. After the VPN Tunnel is Up, those two servers now can communicate with each other.\n"
},
{
	"uri": "/1-create-vpc/4-create-natgw/",
	"title": " NAT Gateway",
	"tags": [],
	"description": "",
	"content": "By default, any instance that you launch into a private subnet in an Amazon VPC is not able to communicate with the Internet through the IGW. This is problematic if the instances within private subnets need direct access to the Internet from the Amazon VPC in order to apply security updates, download patches, or update application software.\nAWS provides NAT instances and NAT gateways to allow instances deployed in private subnets to gain Internet access. For common use cases, we recommend that you use a NAT gateway instead of a NAT instance. The NAT gateway provides better availability and higher bandwidth, and requires less administrative effort than NAT instances.\nTo create a NAT gateway, you must specify a subnet and an Elastic IP address. Ensure that the Elastic IP address is currently not associated with an instance or a network interface.\nIf you are migrating from a NAT instance to a NAT gateway and you want to reuse the NAT instance\u0026rsquo;s Elastic IP address, you must first disassociate the address from your NAT instance.\n"
},
{
	"uri": "/1-create-vpc/5-build-simple-lab/",
	"title": "Build Simple Lab",
	"tags": [],
	"description": "",
	"content": "Through out this lab, we will build a simple VPC follow the diagram below:\nContents:\n Step 1. Create an Amazon Virtual Private Cloud (VPC) Step 2. Create a Private subnet Step 3. Create Public subnets Step 4. Create an Internet gateway Step 5. Create a Route Table and added a route to the Internet Step 6. Create Security group for VM on Public \u0026amp; Private subnet Step 7. Create EC2 on Public subnet Step 8. Create EC2 on Private subnet Step 9. Test ping and SSH PUB-LINUX from Internet Step 10. Test ping and SSH PRI-LINUX from PUB-LINUX Step 11. Create an Elastic IP address Step 12. Create an NAT Gateway Step 13. Test ping to the internet from PRI-LINUX  Step 1. Create an Amazon Virtual Private Cloud (VPC)  Open the Amazon VPC console at https://console.aws.amazon.com/vpc/ In the navigation pane, choose Your VPCs, Create VPC.  Name tag: VPC-MAIN-ASG IPv4 CIDR block: 10.1.0.0/16     For Tennacy configuration we will leave the default mechanism. If we switch to ** Dedicated ** there will be some EC2 Instance type can not be created in the VPC with the ** Dedicated ** tennacy mode.\n\rStep 2. Create a Private subnet  Open the Amazon VPC console at https://console.aws.amazon.com/vpc/ In the left navigation pane, choose Subnets. Choose Create Subnet.  Name tag: PRISUB-MAIN-ASG VPC: VPC-MAIN-ASG Availability Zone: us-west-1b IPv4 CIDR block: 10.1.3.0/24 Choose Yes, Create    Step 3. Create Public subnets  Open the Amazon VPC console at https://console.aws.amazon.com/vpc/ In the left navigation pane, choose Subnets. Choose Create Subnet.  Name tag: PUBSUB1-MAIN-ASG VPC: VPC-MAIN-ASG Availability Zone: us-west-1a IPv4 CIDR block: 10.1.1.0/24 Choose Yes, Create    Then go to create the second Public subnet for NAT\n Choose Create Subnet.  Name tag: PUBSUB2-MAIN-ASG VPC: VPC-MAIN-ASG Availability Zone: us-west-1a IPv4 CIDR block: 10.1.2.0/24 Choose Yes, Create    On the VPC consle page\n In turn select PUBSUB1-MAIN-ASG and PUBSUB2-MAIN-ASG Choose Action, Modify auto-assign IP settings Select Enable auto-assign public IPv4 address and choose Save, Close.  Step 4. Create an Internet gateway  Open the Amazon VPC console at https://console.aws.amazon.com/vpc/ In the left navigation pane, choose Internet Gateways, Create Internet Gateways  Name tag: IGW-MAIN-ASG Choose Create, Close   Select IGW-MAIN-ASG, choose Action then Attach to VPC  VPC: VPC-MAIN-ASG    Step 5. Create a Route Table and added a route to the Internet  Open the Amazon VPC console at https://console.aws.amazon.com/vpc/ In the left navigation pane, choose Route Tables, Create Route Table  Name tag: RT-MAIN-ASG VPC: VPC-MAIN-ASG Choose Create, Close   Select RT-MAIN-ASG, choose Action then Edit Route Choose Add Route  Destination: 0.0.0.0/0 Target: IGW-MAIN-ASG Choose Save Route   Continute to click on Action, then Edit Subnet Association Select PUBSUB1-MAIN-ASG and PUBSUB2-MAIN-ASG, then click on Save  Step 6. Create Security group for VM on Public \u0026amp; Private subnet First, we go to create Security group for Public Subnet\n Open the Amazon VPC console at https://console.aws.amazon.com/vpc/ In the left navigation pane, choose Security Group, Create Security Group  Security group name: SG-PUB-MAIN-ASG Description Info: security for public subnet VPC: VPC-MAIN-ASG   In the Inbound rules area, click Add rules  Type: SSH, Source: My IP Type: Custom ICMP v4, Source: Anywhere Type: Custom ICMP 64, Source: Anywhere Then click Create Security Group    Next, we go to create Security group for Private subnet\n In the left navigation pane, choose Security Group, Create Security Group  Security group name: SG-PRI-MAIN-ASG Description Info: security for private subnet VPC: VPC-MAIN-ASG   In the Inbound rules area, click Add rules  Type: SSH, Source: SG-PUB-MAIN-ASG Type: Custom ICMP v4, Source: Anywhere Type: Custom ICMP 64, Source: Anywhere Then click Create Security Group    Step 7. Create EC2 on Public subnet  Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ In the left navigation pane, choose Intances, Launch Intance Step 1: Choose an Amazon Machine Image (AMI): Amazon Linux 2 AMI (HVM), SSD Volume Type Step 2: Choose an Instance Type: General purpose t2.nano, then Next: Configure Instance Details Step 3: Configure Instance Details  Network: VPC-MAIN-ASG Subnet: PUBSUB1-MAIN-ASG Auto-assign Public IP: Enable   Then click Next: Add Storage, Next: Add Tags Step 5: Add Tags, choose Add Tag  Key: Name Value: PUB-LINUX   Then click Next: Configure Security Group Step 6: Configure Security Group  Assign a security group: Select an existing security group Name: SG-PUB-MAIN-ASG   Then click Review and Launch, Launch A Select an existing key pair or Create new key pair prompt appears, choose Create a new key pair  Key pair name: awskey   Choose View Instance and wait for a while to EC2 initialize  Step 8. Create EC2 on Private subnet  Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ In the left navigation pane, choose Intances, Launch Intance Step 1: Choose an Amazon Machine Image (AMI): Amazon Linux 2 AMI (HVM), SSD Volume Type Step 2: Choose an Instance Type: General purpose t2.nano, then Next: Configure Instance Details Step 3: Configure Instance Details  Network: VPC-MAIN-ASG Subnet: PRISUB-MAIN-ASG Auto-assign Public IP: Disable   Then click Next: Add Storage, Next: Add Tags Step 5: Add Tags, choose Add Tag  Key: Name Value: PRI-LINUX   Then click Next: Configure Security Group Step 6: Configure Security Group  Assign a security group: Select an existing security group Name: SG-PRI-MAIN-ASG   Then click Review and Launch, Launch A Select an existing key pair or Create new key pair prompt appears, choose Choose an existing key pair  Key pair name: awskey   Choose View Instance and wait for a while to EC2 initialize  Step 9. Test ping and SSH PUB-LINUX from Internet Step 10. Test ping and SSH PRI-LINUX from PUB-LINUX At the moment, PRI-LINUX can not ping to the internet cause we\u0026rsquo;ve not configure NAT Gateway\nStep 11. Create an Elastic IP address  Open the Amazon VPC console at https://console.aws.amazon.com/vpc/ In the left navigation pane, choose Elastic IPs Choose Allocate Elastic IP address  Elastic IP address settings: Amazon's pool of IPv4 addresses Choose Allocate Then we got a Public IP Address:3.101.0.64    Step 12. Create an NAT Gateway  Open the Amazon VPC console at https://console.aws.amazon.com/vpc/ In the left navigation pane, choose NAT Gateways. Choose Create NAT Gateway.  Subnet: PUBSUB2-MAIN-ASG Elastic IP Allocation ID: 3.101.0.64   Choose Add Tag  Key: Name Value: NAT-MAIN-ASG   Choose Create a NAT Gateway Choose Edit Route Table, Create Route Table  Name tag: RT-NAT-ASG VPC: VPC-MAIN-ASG Choose Create, Close   Select RT-NAT-ASG, choose Action then Edit Route Choose Add Route  Destination: 0.0.0.0/0 Target: NAT-MAIN-ASG Choose Save Route   Continute to click on Action, then Edit Subnet Association Select PRISUB-MAIN-ASG, then click on Save  Step 13. Test ping to the internet from PRI-LINUX Our Final result is:\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]